{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.0", "generated_at": "2021-03-16T22:47:18.341930Z", "invocation_id": "f95ff2af-de12-4598-8a83-d2ad9408f3ef", "env": {}, "project_id": "da210340452cd4ff359d129e821085fc", "user_id": "3ba29a2e-e6c1-4d02-90b0-62926a040844", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.fivetran_log.fivetran_log__transformation_status": {"raw_sql": "{{ config(enabled=var('fivetran_log_using_transformations', True)) }}\n\nwith transformation as (\n\n    select *\n    from {{ ref('stg_fivetran_log__transformation') }}\n),\n\ndestination as (\n\n    select * \n    from {{ ref('stg_fivetran_log__destination') }}\n),\n\n{% if var('fivetran_log_using_triggers', True) %}\ntrigger_tables as (\n\n    select \n        transformation_id, \n        {{ fivetran_utils.string_agg(\"trigger_table\", \"', '\") }} as trigger_tables \n\n    from {{ ref('stg_fivetran_log__trigger_table') }}\n\n    group by 1\n),\n{% endif %}\n\ntransformation_runs as (\n\n    select *\n    from {{ ref('stg_fivetran_log__log') }}\n\n    where event_subtype = 'transformation run success' \n        or event_subtype = 'transformation run failed' \n),\n\nrecent_runs as (\n\n    select \n        transformation_id,\n        max(case when event_subtype = 'transformation run success'  then created_at else null end) as last_run_at,\n        max(case when event_subtype = 'transformation run failed'  then created_at else null end) as last_failure_at\n    \n    from transformation_runs\n    group by 1\n),\n\ntransformation_join as (\n\n    select\n        transformation.*,\n        destination.destination_name,\n        recent_runs.last_run_at as last_successful_run_at,\n        case when recent_runs.last_run_at > recent_runs.last_failure_at or recent_runs.last_failure_at is null then 'success'\n        else 'failure' end as last_run_attempt\n        {% if var('fivetran_log_using_triggers', True) %}\n        ,\n        trigger_tables.trigger_tables\n        {% endif %}\n\n    from \n    transformation \n    join destination \n        on destination.destination_id = transformation.destination_id\n\n    {% if var('fivetran_log_using_triggers', True) %}   \n    left join trigger_tables\n        on trigger_tables.transformation_id = transformation.transformation_id\n    {% endif %}\n\n    left join recent_runs \n        on recent_runs.transformation_id = transformation.transformation_id\n\n)\n\n\nselect * from transformation_join", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "fivetran_log__transformation_status"], "unique_id": "model.fivetran_log.fivetran_log__transformation_status", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "fivetran_log__transformation_status.sql", "original_file_path": "models/fivetran_log__transformation_status.sql", "name": "fivetran_log__transformation_status", "resource_type": "model", "alias": "fivetran_log__transformation_status", "checksum": {"name": "sha256", "checksum": "04ea5c636894cd3499ec26fd5c407e4e965fb9a6d33a6b8336d37ab84f2cda10"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_fivetran_log__transformation"], ["stg_fivetran_log__destination"], ["stg_fivetran_log__trigger_table"], ["stg_fivetran_log__log"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.fivetran_log.stg_fivetran_log__transformation", "model.fivetran_log.stg_fivetran_log__destination", "model.fivetran_log.stg_fivetran_log__trigger_table", "model.fivetran_log.stg_fivetran_log__log"]}, "description": "Table of transformations enriched with data regarding its run status and any tables  whose new data trigger the transformation to run.\n", "columns": {"transformation_id": {"name": "transformation_id", "description": "Unique ID of the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transformation was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Foreign key referencing the `user` who created the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referenencing the `destination` whose data is being transformed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transformation_name": {"name": "transformation_name", "description": "Name given to the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_paused": {"name": "is_paused", "description": "Boolean of whether the data transformation is currently paused.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "script": {"name": "script", "description": "The code content of the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_delay": {"name": "trigger_delay", "description": "The delay in triggering transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_interval": {"name": "trigger_interval", "description": "The scheduled frequency of the transformation, if a time schedule is chosen as its trigger.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_type": {"name": "trigger_type", "description": "The schedule type of the transformation (time schedule vs. new data in certain tables).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination in which the destination is run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_successful_run_at": {"name": "last_successful_run_at", "description": "Timestamp of when the transformation was last run successfully.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_attempt": {"name": "last_run_attempt", "description": "Outcome of the last run attempt (`\"success\"` or `\"failure\"`).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_tables": {"name": "trigger_tables", "description": "Aggregated string list of the tables that trigger the transformation to run, if it is not on a time schedule.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/fivetran_log__transformation_status.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "enabled": true}, "compiled_sql": "\n\nwith transformation as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__transformation`\n),\n\ndestination as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination`\n),\n\n\ntrigger_tables as (\n\n    select \n        transformation_id, \n        \n    string_agg(trigger_table, ', ')\n\n as trigger_tables \n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__trigger_table`\n\n    group by 1\n),\n\n\ntransformation_runs as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`\n\n    where event_subtype = 'transformation run success' \n        or event_subtype = 'transformation run failed' \n),\n\nrecent_runs as (\n\n    select \n        transformation_id,\n        max(case when event_subtype = 'transformation run success'  then created_at else null end) as last_run_at,\n        max(case when event_subtype = 'transformation run failed'  then created_at else null end) as last_failure_at\n    \n    from transformation_runs\n    group by 1\n),\n\ntransformation_join as (\n\n    select\n        transformation.*,\n        destination.destination_name,\n        recent_runs.last_run_at as last_successful_run_at,\n        case when recent_runs.last_run_at > recent_runs.last_failure_at or recent_runs.last_failure_at is null then 'success'\n        else 'failure' end as last_run_attempt\n        \n        ,\n        trigger_tables.trigger_tables\n        \n\n    from \n    transformation \n    join destination \n        on destination.destination_id = transformation.destination_id\n\n       \n    left join trigger_tables\n        on trigger_tables.transformation_id = transformation.transformation_id\n    \n\n    left join recent_runs \n        on recent_runs.transformation_id = transformation.transformation_id\n\n)\n\n\nselect * from transformation_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__transformation_status`"}, "model.fivetran_log.fivetran_log__connector_status": {"raw_sql": "with connector_log as (\n\n    select *\n    from {{ ref('stg_fivetran_log__log') }}\n\n    -- only looking at errors, warnings, and syncs here\n    where event_type = 'SEVERE'\n        or event_type = 'WARNING'\n        or event_subtype like 'sync%'\n\n),\n\nschema_changes as (\n\n    select\n        connector_id,\n        count(*) as number_of_schema_changes_last_month\n\n    from {{ ref('stg_fivetran_log__log') }}\n\n    where \n        {{ dbt_utils.datediff('created_at', dbt_utils.current_timestamp(), 'day') }} <= 30\n        and event_subtype in ('create_table', 'alter_table', 'create_schema', 'change_schema_config')\n\n    group by 1\n\n),\n\nconnector as (\n\n    select *\n    from {{ ref('stg_fivetran_log__connector') }}\n\n),\n\ndestination as (\n\n    select * \n    from {{ ref('stg_fivetran_log__destination') }}\n),\n\nconnector_metrics as (\n\n    select\n        connector.connector_id,\n        connector.connector_name,\n        connector.connector_type,\n        connector.destination_id,\n        connector.is_paused,\n        connector.set_up_at,\n        max(case when connector_log.event_subtype = 'sync_start' then connector_log.created_at else null end) as last_sync_started_at,\n        max(case when connector_log.event_subtype = 'sync_end' then connector_log.created_at else null end) as last_sync_completed_at,\n        max(case when connector_log.event_type = 'SEVERE' then connector_log.created_at else null end) as last_error_at,\n        max(case when event_type = 'WARNING' then connector_log.created_at else null end) as last_warning_at\n\n    from connector \n    left join connector_log \n        on connector_log.connector_id = connector.connector_id\n    group by 1,2,3,4,5,6\n\n),\n\nconnector_health as (\n\n    select\n        *,\n        case \n            -- there has not been a sync\n            when is_paused then 'paused'\n            when last_sync_started_at is null then 'incomplete'\n            when last_sync_completed_at is null and last_error_at is null then 'initial sync in progress'\n\n            when last_error_at > last_sync_completed_at then 'broken'\n            when last_sync_completed_at is null and last_error_at is not null then 'broken'\n        else 'connected' end as connector_health\n\n    from connector_metrics\n),\n\n-- Joining with log to grab pertinent error/warning messagees\nconnector_recent_logs as (\n\n    select \n        connector_health.connector_id,\n        connector_health.connector_name,\n        connector_health.connector_type,\n        connector_health.destination_id,\n        connector_health.connector_health,\n        connector_health.last_sync_started_at,\n        connector_health.last_sync_completed_at,\n        connector_health.set_up_at,\n        connector_log.event_subtype,\n        connector_log.event_type,\n        connector_log.message_data\n\n    from connector_health \n    left join connector_log \n        on connector_log.connector_id = connector_health.connector_id\n        -- limiting relevance to since the last successful sync completion (if there has been one)\n        and connector_log.created_at > coalesce(connector_health.last_sync_completed_at, '2000-01-01') \n        -- only looking at erors and warnings (excluding syncs)\n        and connector_log.event_type != 'INFO'  \n\n    group by 1,2,3,4,5,6,7,8,9,10,11 -- de-duping error messages\n    \n\n),\n\nfinal as (\n\n    select\n        connector_recent_logs.connector_id,\n        connector_recent_logs.connector_name,\n        connector_recent_logs.connector_type,\n        connector_recent_logs.destination_id,\n        destination.destination_name,\n        connector_recent_logs.connector_health,\n        connector_recent_logs.last_sync_started_at,\n        connector_recent_logs.last_sync_completed_at,\n        connector_recent_logs.set_up_at,\n        coalesce(schema_changes.number_of_schema_changes_last_month, 0) as number_of_schema_changes_last_month,\n        \n        {{ fivetran_utils.string_agg(\"case when connector_recent_logs.event_type = 'SEVERE' then connector_recent_logs.message_data else null end\", \"'\\\\n'\") }} as errors_since_last_completed_sync,\n        {{ fivetran_utils.string_agg(\"case when connector_recent_logs.event_type = 'WARNING' then connector_recent_logs.message_data else null end\", \"'\\\\n'\") }} as warnings_since_last_completed_sync\n        \n\n    from connector_recent_logs\n    left join schema_changes \n        on connector_recent_logs.connector_id = schema_changes.connector_id \n\n    join destination on destination.destination_id = connector_recent_logs.destination_id\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\nselect * from final", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "fivetran_log__connector_status"], "unique_id": "model.fivetran_log.fivetran_log__connector_status", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "fivetran_log__connector_status.sql", "original_file_path": "models/fivetran_log__connector_status.sql", "name": "fivetran_log__connector_status", "resource_type": "model", "alias": "fivetran_log__connector_status", "checksum": {"name": "sha256", "checksum": "794fff0faaac69b03c25b543e77e7aab8135b53cb2458ee33676b08380fb2d66"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_fivetran_log__log"], ["stg_fivetran_log__log"], ["stg_fivetran_log__connector"], ["stg_fivetran_log__destination"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff", "macro.fivetran_utils.string_agg"], "nodes": ["model.fivetran_log.stg_fivetran_log__log", "model.fivetran_log.stg_fivetran_log__log", "model.fivetran_log.stg_fivetran_log__connector", "model.fivetran_log.stg_fivetran_log__destination"]}, "description": "Table of each destination's connector and details surrounding its  connection and data-sync status.\n", "columns": {"connector_id": {"name": "connector_id", "description": "System generated unique ID of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_name": {"name": "connector_name", "description": "Name of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_type": {"name": "connector_type", "description": "The kind of connector (ie google sheets, webhooks).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the connector data is loaded into.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination loading data from this connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_health": {"name": "connector_health", "description": "Status of the connector's data flow. Can be `\"broken\"`, `\"incomplete\"`, `\"connected\"`, `\"paused\"`, or `\"initial sync in progress\"`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_sync_started_at": {"name": "last_sync_started_at", "description": "Timestamp of when the last sync was started. Note that if new data comes in after a sync has  begun, the new data will not be included in this sync.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_sync_completed_at": {"name": "last_sync_completed_at", "description": "Timestamp of when the last sync was complted.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "set_up_at": {"name": "set_up_at", "description": "Timestamp of when the connector was set up.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_schema_changes_last_month": {"name": "number_of_schema_changes_last_month", "description": "The number of schema changes (creating tables or schemas and altering tables) in the past 30 days.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "errors_since_last_completed_sync": {"name": "errors_since_last_completed_sync", "description": "Aggregated line-separated list of error messages (in JSON format) raised synce the last  sync completion. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warnings_since_last_completed_sync": {"name": "warnings_since_last_completed_sync", "description": "Aggregated line-separated list of warning messages (in JSON format) raised synce the last  sync completion. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/fivetran_log__connector_status.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log"}, "compiled_sql": "with connector_log as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`\n\n    -- only looking at errors, warnings, and syncs here\n    where event_type = 'SEVERE'\n        or event_type = 'WARNING'\n        or event_subtype like 'sync%'\n\n),\n\nschema_changes as (\n\n    select\n        connector_id,\n        count(*) as number_of_schema_changes_last_month\n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`\n\n    where \n        \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(created_at as datetime),\n        day\n    )\n\n <= 30\n        and event_subtype in ('create_table', 'alter_table', 'create_schema', 'change_schema_config')\n\n    group by 1\n\n),\n\nconnector as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__connector`\n\n),\n\ndestination as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination`\n),\n\nconnector_metrics as (\n\n    select\n        connector.connector_id,\n        connector.connector_name,\n        connector.connector_type,\n        connector.destination_id,\n        connector.is_paused,\n        connector.set_up_at,\n        max(case when connector_log.event_subtype = 'sync_start' then connector_log.created_at else null end) as last_sync_started_at,\n        max(case when connector_log.event_subtype = 'sync_end' then connector_log.created_at else null end) as last_sync_completed_at,\n        max(case when connector_log.event_type = 'SEVERE' then connector_log.created_at else null end) as last_error_at,\n        max(case when event_type = 'WARNING' then connector_log.created_at else null end) as last_warning_at\n\n    from connector \n    left join connector_log \n        on connector_log.connector_id = connector.connector_id\n    group by 1,2,3,4,5,6\n\n),\n\nconnector_health as (\n\n    select\n        *,\n        case \n            -- there has not been a sync\n            when is_paused then 'paused'\n            when last_sync_started_at is null then 'incomplete'\n            when last_sync_completed_at is null and last_error_at is null then 'initial sync in progress'\n\n            when last_error_at > last_sync_completed_at then 'broken'\n            when last_sync_completed_at is null and last_error_at is not null then 'broken'\n        else 'connected' end as connector_health\n\n    from connector_metrics\n),\n\n-- Joining with log to grab pertinent error/warning messagees\nconnector_recent_logs as (\n\n    select \n        connector_health.connector_id,\n        connector_health.connector_name,\n        connector_health.connector_type,\n        connector_health.destination_id,\n        connector_health.connector_health,\n        connector_health.last_sync_started_at,\n        connector_health.last_sync_completed_at,\n        connector_health.set_up_at,\n        connector_log.event_subtype,\n        connector_log.event_type,\n        connector_log.message_data\n\n    from connector_health \n    left join connector_log \n        on connector_log.connector_id = connector_health.connector_id\n        -- limiting relevance to since the last successful sync completion (if there has been one)\n        and connector_log.created_at > coalesce(connector_health.last_sync_completed_at, '2000-01-01') \n        -- only looking at erors and warnings (excluding syncs)\n        and connector_log.event_type != 'INFO'  \n\n    group by 1,2,3,4,5,6,7,8,9,10,11 -- de-duping error messages\n    \n\n),\n\nfinal as (\n\n    select\n        connector_recent_logs.connector_id,\n        connector_recent_logs.connector_name,\n        connector_recent_logs.connector_type,\n        connector_recent_logs.destination_id,\n        destination.destination_name,\n        connector_recent_logs.connector_health,\n        connector_recent_logs.last_sync_started_at,\n        connector_recent_logs.last_sync_completed_at,\n        connector_recent_logs.set_up_at,\n        coalesce(schema_changes.number_of_schema_changes_last_month, 0) as number_of_schema_changes_last_month,\n        \n        \n    string_agg(case when connector_recent_logs.event_type = 'SEVERE' then connector_recent_logs.message_data else null end, '\\n')\n\n as errors_since_last_completed_sync,\n        \n    string_agg(case when connector_recent_logs.event_type = 'WARNING' then connector_recent_logs.message_data else null end, '\\n')\n\n as warnings_since_last_completed_sync\n        \n\n    from connector_recent_logs\n    left join schema_changes \n        on connector_recent_logs.connector_id = schema_changes.connector_id \n\n    join destination on destination.destination_id = connector_recent_logs.destination_id\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__connector_status`"}, "model.fivetran_log.fivetran_log__credit_mar_destination_history": {"raw_sql": "with table_mar as (\n    \n    select *\n    from {{ ref('fivetran_log__mar_table_history') }}\n),\n\ndestination_mar as (\n\n    select \n        measured_month,\n        destination_id,\n        destination_name,\n        sum(monthly_active_rows) as monthly_active_rows\n    \n    from table_mar\n    group by 1,2,3\n),\n\ncredits_used as (\n\n    select \n        destination_id,\n        credits_consumed,\n        cast(concat(measured_month, '-01') as date) as measured_month -- match date format to join with MAR table\n\n    from {{ ref('stg_fivetran_log__credits_used') }}\n),\n\njoin_credits_mar as (\n\n    select \n        destination_mar.measured_month,\n        destination_mar.destination_id,\n        destination_mar.destination_name,\n        credits_used.credits_consumed,\n        destination_mar.monthly_active_rows,\n        round( nullif(credits_used.credits_consumed,0) * 1000000.0 / nullif(destination_mar.monthly_active_rows,0), 2) as credits_per_million_mar,\n        round( nullif(destination_mar.monthly_active_rows,0) * 1.0 / nullif(credits_used.credits_consumed,0), 0) as mar_per_credit\n\n    from \n    destination_mar left join credits_used \n        on destination_mar.measured_month = cast(credits_used.measured_month as timestamp)\n        and destination_mar.destination_id = credits_used.destination_id\n\n)\n\nselect * from join_credits_mar\norder by measured_month desc", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "fivetran_log__credit_mar_destination_history"], "unique_id": "model.fivetran_log.fivetran_log__credit_mar_destination_history", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "fivetran_log__credit_mar_destination_history.sql", "original_file_path": "models/fivetran_log__credit_mar_destination_history.sql", "name": "fivetran_log__credit_mar_destination_history", "resource_type": "model", "alias": "fivetran_log__credit_mar_destination_history", "checksum": {"name": "sha256", "checksum": "f395bfa5140935cc59cfa64c84e544732d1d23acf09a97c0c059bc3a579ec673"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["fivetran_log__mar_table_history"], ["stg_fivetran_log__credits_used"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.fivetran_log.fivetran_log__mar_table_history", "model.fivetran_log.stg_fivetran_log__credits_used"]}, "description": "Table of each destination's credit consumption and active volume, per month. Includes the  credits used per million MAR and MAR per credit. Read more about the relationship between  credit consumption and MAR [here](https://fivetran.com/creditconsumption).\n", "columns": {"measured_month": {"name": "measured_month", "description": "The month (yyyy-mm-01) of the credit/MAR measurement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse housing the active rows.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_consumed": {"name": "credits_consumed", "description": "The number of credits used by the destination for the given month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_rows": {"name": "monthly_active_rows", "description": "The number of total active rows measured in the destination for the month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_per_million_mar": {"name": "credits_per_million_mar", "description": "The ratio of credits used that month per every million active rows synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mar_per_credit": {"name": "mar_per_credit", "description": "The ratio of the month's active volume to the credits used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/fivetran_log__credit_mar_destination_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log"}, "compiled_sql": "with table_mar as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__mar_table_history`\n),\n\ndestination_mar as (\n\n    select \n        measured_month,\n        destination_id,\n        destination_name,\n        sum(monthly_active_rows) as monthly_active_rows\n    \n    from table_mar\n    group by 1,2,3\n),\n\ncredits_used as (\n\n    select \n        destination_id,\n        credits_consumed,\n        cast(concat(measured_month, '-01') as date) as measured_month -- match date format to join with MAR table\n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__credits_used`\n),\n\njoin_credits_mar as (\n\n    select \n        destination_mar.measured_month,\n        destination_mar.destination_id,\n        destination_mar.destination_name,\n        credits_used.credits_consumed,\n        destination_mar.monthly_active_rows,\n        round( nullif(credits_used.credits_consumed,0) * 1000000.0 / nullif(destination_mar.monthly_active_rows,0), 2) as credits_per_million_mar,\n        round( nullif(destination_mar.monthly_active_rows,0) * 1.0 / nullif(credits_used.credits_consumed,0), 0) as mar_per_credit\n\n    from \n    destination_mar left join credits_used \n        on destination_mar.measured_month = cast(credits_used.measured_month as timestamp)\n        and destination_mar.destination_id = credits_used.destination_id\n\n)\n\nselect * from join_credits_mar\norder by measured_month desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__credit_mar_destination_history`"}, "model.fivetran_log.fivetran_log__audit_table": {"raw_sql": "with sync_log as (\n    \n    select \n        *,\n        {{ fivetran_utils.json_extract(string='message_data', string_path='table') }} as table_name\n\n    from {{ ref('stg_fivetran_log__log') }}\n\n    where event_subtype in ('sync_start', 'sync_end', 'write_to_table_start', 'write_to_table_end', 'records_modified')\n),\n\n\nconnector as (\n\n    select *\n    from {{ ref('fivetran_log__connector_status') }}\n),\n\nadd_connector_info as (\n\n    select \n        sync_log.*,\n        connector.connector_name,\n        connector.destination_id,\n        connector.destination_name\n\n    from sync_log join connector using(connector_id)\n),\n\nsync_timestamps as (\n\n    select\n        connector_id,\n        connector_name,\n        table_name,\n        event_subtype,\n        destination_id,\n        destination_name,\n\n        created_at as write_to_table_start,\n        \n        min(case when event_subtype = 'write_to_table_end' then created_at else null end) \n            over (partition by connector_id, table_name order by created_at ROWS between CURRENT ROW AND UNBOUNDED FOLLOWING) as write_to_table_end,\n\n        max(case when event_subtype = 'sync_start' then created_at else null end) \n            over (partition by connector_id order by created_at ROWS between UNBOUNDED PRECEDING and CURRENT ROW) as sync_start,\n\n        min(case when event_subtype = 'sync_end' then created_at else null end) \n            over (partition by connector_id order by created_at ROWS between CURRENT ROW AND UNBOUNDED FOLLOWING) as sync_end, -- coalesce with next_sync_start\n\n        min(case when event_subtype = 'sync_start' then created_at else null end) \n            over (partition by connector_id order by created_at ROWS between CURRENT ROW AND UNBOUNDED FOLLOWING) as next_sync_start\n\n    from add_connector_info\n\n),\n\n-- this will be the base for every record in the final CTE\nlimit_to_table_starts as (\n\n    select *\n\n    from sync_timestamps \n    where event_subtype = 'write_to_table_start'\n\n),\n\nrecords_modified_log as (\n\n    select \n        connector_id,\n        created_at,\n        {{ fivetran_utils.json_extract(string='message_data', string_path='table') }} as table_name,\n        {{ fivetran_utils.json_extract(string='message_data', string_path='schema') }} as schema_name,\n        {{ fivetran_utils.json_extract(string='message_data', string_path='operationType') }} as operation_type,\n        cast ({{ fivetran_utils.json_extract(string='message_data', string_path='count') }} as {{ dbt_utils.type_int() }}) as row_count\n\n    from sync_log \n    where event_subtype = 'records_modified'\n\n),\n\nsum_records_modified as (\n\n    select\n        limit_to_table_starts.connector_id,\n        limit_to_table_starts.connector_name,\n        limit_to_table_starts.table_name,\n        limit_to_table_starts.destination_id,\n        limit_to_table_starts.destination_name,\n        limit_to_table_starts.write_to_table_start,\n        limit_to_table_starts.write_to_table_end,\n        limit_to_table_starts.sync_start,\n        case when limit_to_table_starts.sync_end > limit_to_table_starts.next_sync_start then null else limit_to_table_starts.sync_end end as sync_end,\n\n        sum(case when records_modified_log.operation_type = 'REPLACED_OR_INSERTED' then records_modified_log.row_count else 0 end) as sum_rows_replaced_or_inserted,\n        sum(case when records_modified_log.operation_type = 'UPDATED' then records_modified_log.row_count else 0 end) as sum_rows_updated,\n        sum(case when records_modified_log.operation_type = 'DELETED' then records_modified_log.row_count else 0 end) as sum_rows_deleted\n\n    from limit_to_table_starts\n\n    left join records_modified_log on \n        limit_to_table_starts.connector_id = records_modified_log.connector_id\n        and limit_to_table_starts.table_name = records_modified_log.table_name\n        -- confine it to one sync\n        and records_modified_log.created_at > limit_to_table_starts.sync_start \n        and records_modified_log.created_at < coalesce(limit_to_table_starts.sync_end, limit_to_table_starts.next_sync_start) \n\n    group by 1,2,3,4,5,6,7,8,9\n)\n\nselect *\nfrom sum_records_modified", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "fivetran_log__audit_table"], "unique_id": "model.fivetran_log.fivetran_log__audit_table", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "fivetran_log__audit_table.sql", "original_file_path": "models/fivetran_log__audit_table.sql", "name": "fivetran_log__audit_table", "resource_type": "model", "alias": "fivetran_log__audit_table", "checksum": {"name": "sha256", "checksum": "97d04cd0519bce3cb30af656f39325680233f2b2205aa8bccadf555d7081869c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_fivetran_log__log"], ["fivetran_log__connector_status"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract", "macro.dbt_utils.type_int"], "nodes": ["model.fivetran_log.stg_fivetran_log__log", "model.fivetran_log.fivetran_log__connector_status"]}, "description": "Table replacing the deprecated `fivetran_audit` table. For each table written to in a sync, captures timestamps and row quantities around table syncs. Each record represents a table being written to in a connector sync. Note: the quantities here will not match the deprecated `fivetran_audit` table completely, as `fivetran_audit` reported on pre-duplicated data loads.\n", "columns": {"connector_id": {"name": "connector_id", "description": "System generated unique ID of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_name": {"name": "connector_name", "description": "Name of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "Name of the table being written to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the connector data is loaded into.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination that the table is being written to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "write_to_table_start": {"name": "write_to_table_start", "description": "Timestamp of when Fivetran began to write to this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "write_to_table_end": {"name": "write_to_table_end", "description": "Timestamp of when Fivetran finished writing to this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sync_start": {"name": "sync_start", "description": "Timestamp of when this connector-level sync began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sync_end": {"name": "sync_end", "description": "Timestamp of when this connector-level sync finished, if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_rows_replaced_or_inserted": {"name": "sum_rows_replaced_or_inserted", "description": "Sum of the rows replaced or inserted into this table during a sync.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_rows_updated": {"name": "sum_rows_updated", "description": "Sum of the rows updated in this table during a sync.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_rows_deleted": {"name": "sum_rows_deleted", "description": "Sum of the rows deleted from this table during a sync.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/fivetran_log__audit_table.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log"}, "compiled_sql": "with sync_log as (\n    \n    select \n        *,\n        \n\n  json_extract_scalar(message_data, '$.table' )\n\n as table_name\n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`\n\n    where event_subtype in ('sync_start', 'sync_end', 'write_to_table_start', 'write_to_table_end', 'records_modified')\n),\n\n\nconnector as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__connector_status`\n),\n\nadd_connector_info as (\n\n    select \n        sync_log.*,\n        connector.connector_name,\n        connector.destination_id,\n        connector.destination_name\n\n    from sync_log join connector using(connector_id)\n),\n\nsync_timestamps as (\n\n    select\n        connector_id,\n        connector_name,\n        table_name,\n        event_subtype,\n        destination_id,\n        destination_name,\n\n        created_at as write_to_table_start,\n        \n        min(case when event_subtype = 'write_to_table_end' then created_at else null end) \n            over (partition by connector_id, table_name order by created_at ROWS between CURRENT ROW AND UNBOUNDED FOLLOWING) as write_to_table_end,\n\n        max(case when event_subtype = 'sync_start' then created_at else null end) \n            over (partition by connector_id order by created_at ROWS between UNBOUNDED PRECEDING and CURRENT ROW) as sync_start,\n\n        min(case when event_subtype = 'sync_end' then created_at else null end) \n            over (partition by connector_id order by created_at ROWS between CURRENT ROW AND UNBOUNDED FOLLOWING) as sync_end, -- coalesce with next_sync_start\n\n        min(case when event_subtype = 'sync_start' then created_at else null end) \n            over (partition by connector_id order by created_at ROWS between CURRENT ROW AND UNBOUNDED FOLLOWING) as next_sync_start\n\n    from add_connector_info\n\n),\n\n-- this will be the base for every record in the final CTE\nlimit_to_table_starts as (\n\n    select *\n\n    from sync_timestamps \n    where event_subtype = 'write_to_table_start'\n\n),\n\nrecords_modified_log as (\n\n    select \n        connector_id,\n        created_at,\n        \n\n  json_extract_scalar(message_data, '$.table' )\n\n as table_name,\n        \n\n  json_extract_scalar(message_data, '$.schema' )\n\n as schema_name,\n        \n\n  json_extract_scalar(message_data, '$.operationType' )\n\n as operation_type,\n        cast (\n\n  json_extract_scalar(message_data, '$.count' )\n\n as \n    int64\n) as row_count\n\n    from sync_log \n    where event_subtype = 'records_modified'\n\n),\n\nsum_records_modified as (\n\n    select\n        limit_to_table_starts.connector_id,\n        limit_to_table_starts.connector_name,\n        limit_to_table_starts.table_name,\n        limit_to_table_starts.destination_id,\n        limit_to_table_starts.destination_name,\n        limit_to_table_starts.write_to_table_start,\n        limit_to_table_starts.write_to_table_end,\n        limit_to_table_starts.sync_start,\n        case when limit_to_table_starts.sync_end > limit_to_table_starts.next_sync_start then null else limit_to_table_starts.sync_end end as sync_end,\n\n        sum(case when records_modified_log.operation_type = 'REPLACED_OR_INSERTED' then records_modified_log.row_count else 0 end) as sum_rows_replaced_or_inserted,\n        sum(case when records_modified_log.operation_type = 'UPDATED' then records_modified_log.row_count else 0 end) as sum_rows_updated,\n        sum(case when records_modified_log.operation_type = 'DELETED' then records_modified_log.row_count else 0 end) as sum_rows_deleted\n\n    from limit_to_table_starts\n\n    left join records_modified_log on \n        limit_to_table_starts.connector_id = records_modified_log.connector_id\n        and limit_to_table_starts.table_name = records_modified_log.table_name\n        -- confine it to one sync\n        and records_modified_log.created_at > limit_to_table_starts.sync_start \n        and records_modified_log.created_at < coalesce(limit_to_table_starts.sync_end, limit_to_table_starts.next_sync_start) \n\n    group by 1,2,3,4,5,6,7,8,9\n)\n\nselect *\nfrom sum_records_modified", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__audit_table`"}, "model.fivetran_log.fivetran_log__mar_table_history": {"raw_sql": "with active_volume as (\n\n    select \n        *, \n        {{ dbt_utils.date_trunc('month', 'measured_at') }} as measured_month\n\n    from {{ ref('stg_fivetran_log__active_volume') }} \n\n    where schema_name != 'fivetran_log' -- it's free! \n\n),\n\nconnector as (\n\n    select * \n    from {{ ref('stg_fivetran_log__connector') }}\n),\n\ndestination as (\n\n    select *\n    from {{ ref('stg_fivetran_log__destination') }}\n),\n\nordered_mar as (\n\n    select\n        connector_name,\n        schema_name,\n        table_name,\n        destination_id,\n        measured_at,\n        measured_month,\n        monthly_active_rows,\n\n        -- each measurement is cumulative for the month, so we'll only look at the latest date for each month\n        row_number() over(partition by table_name, connector_name, destination_id, measured_month order by measured_at desc) as n\n\n    from active_volume\n\n),\n\nlatest_mar as (\n    select \n        connector_name,\n        schema_name,\n        table_name,\n        destination_id,\n        measured_month,\n        date(measured_at) as last_measured_at,\n        monthly_active_rows\n      \n    from ordered_mar\n    where n = 1\n\n),\n\nmar_join as (\n\n    select \n        latest_mar.*,\n        connector.connector_type,\n        connector.connector_id,\n        destination.destination_name\n\n    from latest_mar\n    join connector \n        on latest_mar.connector_name = connector.connector_name\n        and latest_mar.destination_id = connector.destination_id\n    join destination on latest_mar.destination_id = destination.destination_id\n)\n\nselect * from mar_join\norder by measured_month desc, destination_id, connector_name", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "fivetran_log__mar_table_history"], "unique_id": "model.fivetran_log.fivetran_log__mar_table_history", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "fivetran_log__mar_table_history.sql", "original_file_path": "models/fivetran_log__mar_table_history.sql", "name": "fivetran_log__mar_table_history", "resource_type": "model", "alias": "fivetran_log__mar_table_history", "checksum": {"name": "sha256", "checksum": "2304afb9d2ecbd486890b525e0cfdf57d6fbcf07add6be88279dee5eef82744e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_fivetran_log__active_volume"], ["stg_fivetran_log__connector"], ["stg_fivetran_log__destination"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.fivetran_log.stg_fivetran_log__active_volume", "model.fivetran_log.stg_fivetran_log__connector", "model.fivetran_log.stg_fivetran_log__destination"]}, "description": "Table of each table's monthly active rows (MAR) for all connectors and destinations, per month. Read more about how monthly active rows are defined and calculated  [here](https://fivetran.com/docs/getting-started/consumption-based-pricing).\n", "columns": {"connector_name": {"name": "connector_name", "description": "Name of the connector loading this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_id": {"name": "connector_id", "description": "System-generated uniqu ID of the connector loading this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "Name of the schema in which the table lives.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "Name of the table whose MAR was measured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the connector data is loaded into.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measured_month": {"name": "measured_month", "description": "The month (yyyy-mm-01) of the measurement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_measured_at": {"name": "last_measured_at", "description": "Timestamp of when the last MAR measurement for the month was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_rows": {"name": "monthly_active_rows", "description": "The number of active rows measured in the table for the month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_type": {"name": "connector_type", "description": "The kind of connector (ie google sheets, webhooks).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/fivetran_log__mar_table_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log"}, "compiled_sql": "with active_volume as (\n\n    select \n        *, \n        \n    timestamp_trunc(\n        cast(measured_at as timestamp),\n        month\n    )\n\n as measured_month\n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__active_volume` \n\n    where schema_name != 'fivetran_log' -- it's free! \n\n),\n\nconnector as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__connector`\n),\n\ndestination as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination`\n),\n\nordered_mar as (\n\n    select\n        connector_name,\n        schema_name,\n        table_name,\n        destination_id,\n        measured_at,\n        measured_month,\n        monthly_active_rows,\n\n        -- each measurement is cumulative for the month, so we'll only look at the latest date for each month\n        row_number() over(partition by table_name, connector_name, destination_id, measured_month order by measured_at desc) as n\n\n    from active_volume\n\n),\n\nlatest_mar as (\n    select \n        connector_name,\n        schema_name,\n        table_name,\n        destination_id,\n        measured_month,\n        date(measured_at) as last_measured_at,\n        monthly_active_rows\n      \n    from ordered_mar\n    where n = 1\n\n),\n\nmar_join as (\n\n    select \n        latest_mar.*,\n        connector.connector_type,\n        connector.connector_id,\n        destination.destination_name\n\n    from latest_mar\n    join connector \n        on latest_mar.connector_name = connector.connector_name\n        and latest_mar.destination_id = connector.destination_id\n    join destination on latest_mar.destination_id = destination.destination_id\n)\n\nselect * from mar_join\norder by measured_month desc, destination_id, connector_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__mar_table_history`"}, "model.fivetran_log.fivetran_log__schema_changelog": {"raw_sql": "with schema_changes as (\n\n    select *\n    from {{ ref('stg_fivetran_log__log') }}\n\n    where event_subtype in ('create_table', 'alter_table', 'create_schema', 'change_schema_config')\n),\n\nconnector as (\n\n    select *\n    from {{ ref('fivetran_log__connector_status') }}\n),\n\nadd_connector_info as (\n\n    select \n        schema_changes.*,\n        connector.connector_name,\n        connector.destination_id,\n        connector.destination_name\n\n    from schema_changes join connector using(connector_id)\n),\n\nfinal as (\n\n    select\n        connector_id,\n        connector_name,\n        destination_id,\n        destination_name,\n        created_at,\n        event_subtype,\n        message_data,\n\n        case \n        when event_subtype = 'alter_table' then {{ fivetran_utils.json_extract(string='message_data', string_path='table') }} \n        when event_subtype = 'create_table' then {{ fivetran_utils.json_extract(string='message_data', string_path='name') }} \n        else null end as table_name,\n\n        case \n        when event_subtype = 'create_schema' or event_subtype = 'create_table' then {{ fivetran_utils.json_extract(string='message_data', string_path='schema') }} \n        else null end as schema_name\n    \n    from add_connector_info\n)\n\nselect * from final\norder by created_at desc, connector_id", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "fivetran_log__schema_changelog"], "unique_id": "model.fivetran_log.fivetran_log__schema_changelog", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "fivetran_log__schema_changelog.sql", "original_file_path": "models/fivetran_log__schema_changelog.sql", "name": "fivetran_log__schema_changelog", "resource_type": "model", "alias": "fivetran_log__schema_changelog", "checksum": {"name": "sha256", "checksum": "1afec6aa41c257d8d79de26dacfb55dbe2101a9865f76a5d2ef3ce1cab386203"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_fivetran_log__log"], ["fivetran_log__connector_status"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"], "nodes": ["model.fivetran_log.stg_fivetran_log__log", "model.fivetran_log.fivetran_log__connector_status"]}, "description": "Table capturing information around each kind of schema change made to a connector. Schema changes include altering and creating tables, changing the schema configuration, and creating schemas. \n", "columns": {"connector_id": {"name": "connector_id", "description": "System generated unique ID of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_name": {"name": "connector_name", "description": "Name of the connector whose schema was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the connector data is loaded into.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination that the table is being written to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the schema was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_subtype": {"name": "event_subtype", "description": "Type of schema change event. One of 'alter_table', 'create_table', 'change_schema_config', 'create_schema'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_data": {"name": "message_data", "description": "The details of the event in JSON format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "Name of the table, if a table is being altered or created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "Name of the schema, if a schema or table is being created.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/fivetran_log__schema_changelog.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log"}, "compiled_sql": "with schema_changes as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`\n\n    where event_subtype in ('create_table', 'alter_table', 'create_schema', 'change_schema_config')\n),\n\nconnector as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__connector_status`\n),\n\nadd_connector_info as (\n\n    select \n        schema_changes.*,\n        connector.connector_name,\n        connector.destination_id,\n        connector.destination_name\n\n    from schema_changes join connector using(connector_id)\n),\n\nfinal as (\n\n    select\n        connector_id,\n        connector_name,\n        destination_id,\n        destination_name,\n        created_at,\n        event_subtype,\n        message_data,\n\n        case \n        when event_subtype = 'alter_table' then \n\n  json_extract_scalar(message_data, '$.table' )\n\n \n        when event_subtype = 'create_table' then \n\n  json_extract_scalar(message_data, '$.name' )\n\n \n        else null end as table_name,\n\n        case \n        when event_subtype = 'create_schema' or event_subtype = 'create_table' then \n\n  json_extract_scalar(message_data, '$.schema' )\n\n \n        else null end as schema_name\n    \n    from add_connector_info\n)\n\nselect * from final\norder by created_at desc, connector_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__schema_changelog`"}, "model.fivetran_log.fivetran_log__connector_daily_events": {"raw_sql": "-- depends_on: {{ var('connector') }}\n\nwith connector as (\n    \n    select * \n    from {{ ref('fivetran_log__connector_status') }}\n),\n\n-- grab api calls, schema changes, and record modifications\nlog_events as (\n\n    select \n        connector_id,\n        cast( {{ dbt_utils.date_trunc('day', 'created_at') }} as date) as date_day,\n        case \n            when event_subtype in ('create_table', 'alter_table', 'create_schema', 'change_schema_config') then 'schema_change' \n            else event_subtype end as event_subtype,\n\n        sum(case when event_subtype = 'records_modified' then cast( {{ fivetran_utils.json_extract(string='message_data', string_path='count') }} as {{ dbt_utils.type_int()}} )\n        else 1 end) as count_events \n\n    from {{ ref('stg_fivetran_log__log') }}\n\n    where event_subtype in ('api_call', \n                            'records_modified', \n                            'create_table', 'alter_table', 'create_schema', 'change_schema_config') -- all schema changes\n                            \n        and connector_id is not null\n\n    group by 1,2,3\n),\n\npivot_out_events as (\n\n    select\n        connector_id,\n        date_day,\n        max(case when event_subtype = 'api_call' then count_events else 0 end) as count_api_calls,\n        max(case when event_subtype = 'records_modified' then count_events else 0 end) as count_record_modifications,\n        max(case when event_subtype = 'schema_change' then count_events else 0 end) as count_schema_changes\n\n    from log_events\n    group by 1,2\n),\n\nconnector_event_counts as (\n\n    select\n        pivot_out_events.date_day,\n        pivot_out_events.count_api_calls,\n        pivot_out_events.count_record_modifications,\n        pivot_out_events.count_schema_changes,\n        connector.connector_name,\n        connector.connector_id,\n        connector.connector_type,\n        connector.destination_name,\n        connector.destination_id,\n        connector.set_up_at\n    from\n    connector left join pivot_out_events \n        on pivot_out_events.connector_id = connector.connector_id\n),\n\nspine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( signed_up ) as min_date from {{ var('connector') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n    {% else %} {% set first_date = \"2016-01-01\" %}\n    {% endif %}\n\n    {{ dbt_utils.date_spine(\n        datepart = \"day\", \n        start_date =  \"'\" ~ first_date[0:10] ~ \"'\", \n        end_date = dbt_utils.dateadd(\"week\", 1, dbt_utils.date_trunc('day', dbt_utils.current_timestamp())) \n        ) \n    }} \n),\n\nconnector_event_history as (\n\n    select\n        cast(spine.date_day as date) as date_day,\n        connector_event_counts.connector_name,\n        connector_event_counts.connector_id,\n        connector_event_counts.connector_type,\n        connector_event_counts.destination_name,\n        connector_event_counts.destination_id,\n        max(case \n            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_api_calls\n            else 0\n        end) as count_api_calls,\n        max(case \n            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_record_modifications\n            else 0\n        end) as count_record_modifications,\n        max(case \n            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_schema_changes\n            else 0\n        end) as count_schema_changes\n    from\n    spine join connector_event_counts\n        on spine.date_day  >= cast( {{ dbt_utils.date_trunc('day', 'connector_event_counts.set_up_at') }} as date)\n\n    group by 1,2,3,4,5,6\n),\n\n-- now rejoin spine to get a complete calendar\njoin_event_history as (\n    \n    select\n        spine.date_day,\n        connector_event_history.connector_name,\n        connector_event_history.connector_id,\n        connector_event_history.connector_type,\n        connector_event_history.destination_name,\n        connector_event_history.destination_id,\n        max(connector_event_history.count_api_calls) as count_api_calls,\n        max(connector_event_history.count_record_modifications) as count_record_modifications,\n        max(connector_event_history.count_schema_changes) as count_schema_changes\n\n    from\n    spine left join connector_event_history\n        on cast(spine.date_day as date) = connector_event_history.date_day\n\n    group by 1,2,3,4,5,6\n),\n\nfinal as (\n\n    select *\n    from join_event_history\n\n    where cast(date_day as timestamp) <= {{ dbt_utils.current_timestamp() }}\n\n    order by date_day desc\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "fivetran_log__connector_daily_events"], "unique_id": "model.fivetran_log.fivetran_log__connector_daily_events", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "fivetran_log__connector_daily_events.sql", "original_file_path": "models/fivetran_log__connector_daily_events.sql", "name": "fivetran_log__connector_daily_events", "resource_type": "model", "alias": "fivetran_log__connector_daily_events", "checksum": {"name": "sha256", "checksum": "280bb08278a705056ea1b8df6745bed92d71eb38f2436e4a6e3187d4f275dc27"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["fivetran_log__connector_status"], ["stg_fivetran_log__log"]], "sources": [["fivetran_log", "connector"]], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.fivetran_utils.json_extract", "macro.dbt_utils.type_int", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_utils.date_spine", "macro.dbt.run_query"], "nodes": ["source.fivetran_log.fivetran_log.connector", "model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.stg_fivetran_log__log"]}, "description": "Table of each connector's daily history of the quantity of api calls, schema changes, and records modified, starting at the connector's setup date. \n", "columns": {"connector_id": {"name": "connector_id", "description": "System generated unique ID of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_name": {"name": "connector_name", "description": "Name of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_type": {"name": "connector_type", "description": "The kind of connector (ie google sheets, webhooks).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the connector data is loaded into.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination loading data from this connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date on which the number of api calls for the connector is measured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_api_calls": {"name": "count_api_calls", "description": "The number of api call events logged for this connector on this day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_record_modifications": {"name": "count_record_modifications", "description": "The sum of all records modified (includes updates, inserts, and deletes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_schema_changes": {"name": "count_schema_changes", "description": "The number of schema change events for this connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/fivetran_log__connector_daily_events.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log"}, "compiled_sql": "-- depends_on: `dbt-package-testing`.`fivetran_log_acct`.`connector`\n\nwith connector as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__connector_status`\n),\n\n-- grab api calls, schema changes, and record modifications\nlog_events as (\n\n    select \n        connector_id,\n        cast( \n    timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    )\n\n as date) as date_day,\n        case \n            when event_subtype in ('create_table', 'alter_table', 'create_schema', 'change_schema_config') then 'schema_change' \n            else event_subtype end as event_subtype,\n\n        sum(case when event_subtype = 'records_modified' then cast( \n\n  json_extract_scalar(message_data, '$.count' )\n\n as \n    int64\n )\n        else 1 end) as count_events \n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`\n\n    where event_subtype in ('api_call', \n                            'records_modified', \n                            'create_table', 'alter_table', 'create_schema', 'change_schema_config') -- all schema changes\n                            \n        and connector_id is not null\n\n    group by 1,2,3\n),\n\npivot_out_events as (\n\n    select\n        connector_id,\n        date_day,\n        max(case when event_subtype = 'api_call' then count_events else 0 end) as count_api_calls,\n        max(case when event_subtype = 'records_modified' then count_events else 0 end) as count_record_modifications,\n        max(case when event_subtype = 'schema_change' then count_events else 0 end) as count_schema_changes\n\n    from log_events\n    group by 1,2\n),\n\nconnector_event_counts as (\n\n    select\n        pivot_out_events.date_day,\n        pivot_out_events.count_api_calls,\n        pivot_out_events.count_record_modifications,\n        pivot_out_events.count_schema_changes,\n        connector.connector_name,\n        connector.connector_id,\n        connector.connector_type,\n        connector.destination_name,\n        connector.destination_id,\n        connector.set_up_at\n    from\n    connector left join pivot_out_events \n        on pivot_out_events.connector_id = connector.connector_id\n),\n\nspine as (\n\n    \n    \n    \n    \n    \n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1730\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( '2016-06-27' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        day\n    )\n\n as datetime),\n        interval 1 week\n        )\n\n\n\n)\n\nselect * from filtered\n\n \n),\n\nconnector_event_history as (\n\n    select\n        cast(spine.date_day as date) as date_day,\n        connector_event_counts.connector_name,\n        connector_event_counts.connector_id,\n        connector_event_counts.connector_type,\n        connector_event_counts.destination_name,\n        connector_event_counts.destination_id,\n        max(case \n            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_api_calls\n            else 0\n        end) as count_api_calls,\n        max(case \n            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_record_modifications\n            else 0\n        end) as count_record_modifications,\n        max(case \n            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_schema_changes\n            else 0\n        end) as count_schema_changes\n    from\n    spine join connector_event_counts\n        on spine.date_day  >= cast( \n    timestamp_trunc(\n        cast(connector_event_counts.set_up_at as timestamp),\n        day\n    )\n\n as date)\n\n    group by 1,2,3,4,5,6\n),\n\n-- now rejoin spine to get a complete calendar\njoin_event_history as (\n    \n    select\n        spine.date_day,\n        connector_event_history.connector_name,\n        connector_event_history.connector_id,\n        connector_event_history.connector_type,\n        connector_event_history.destination_name,\n        connector_event_history.destination_id,\n        max(connector_event_history.count_api_calls) as count_api_calls,\n        max(connector_event_history.count_record_modifications) as count_record_modifications,\n        max(connector_event_history.count_schema_changes) as count_schema_changes\n\n    from\n    spine left join connector_event_history\n        on cast(spine.date_day as date) = connector_event_history.date_day\n\n    group by 1,2,3,4,5,6\n),\n\nfinal as (\n\n    select *\n    from join_event_history\n\n    where cast(date_day as timestamp) <= \n    current_timestamp\n\n\n    order by date_day desc\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__connector_daily_events`"}, "model.fivetran_log.stg_fivetran_log__credits_used": {"raw_sql": "with  credits_used as (\n\n    select * from {{ var('credits_used') }}\n\n),\n\nfields as (\n    \n    select \n        destination_id,\n        measured_month,\n        credits_consumed\n    \n    from credits_used\n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__credits_used"], "unique_id": "model.fivetran_log.stg_fivetran_log__credits_used", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__credits_used.sql", "original_file_path": "models/staging/stg_fivetran_log__credits_used.sql", "name": "stg_fivetran_log__credits_used", "resource_type": "model", "alias": "stg_fivetran_log__credits_used", "checksum": {"name": "sha256", "checksum": "7e2f8682d2ab38d2468010b6597996799af5f60f587ddb7c1adfa355c1ffa84e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "credits_used"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.credits_used"]}, "description": "Table of the credits used by the customer per month for each destination.", "columns": {"destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the credits were used on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measured_month": {"name": "measured_month", "description": "The month (yyyy-mm) in which the credits were consumed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_consumed": {"name": "credits_consumed", "description": "The number of credits used by the destination for the given month.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__credits_used.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with  credits_used as (\n\n    select * from `dbt-package-testing`.`fivetran_log_acct`.`credits_used`\n\n),\n\nfields as (\n    \n    select \n        destination_id,\n        measured_month,\n        credits_consumed\n    \n    from credits_used\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__credits_used`"}, "model.fivetran_log.stg_fivetran_log__destination_membership": {"raw_sql": "with destination_membership as (\n    \n    select * from {{ var('destination_membership') }}\n\n),\n\nfields as (\n\n    select\n        destination_id,\n        user_id,\n        activated_at,\n        joined_at,\n        role as destination_role\n        \n    from destination_membership\n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__destination_membership"], "unique_id": "model.fivetran_log.stg_fivetran_log__destination_membership", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__destination_membership.sql", "original_file_path": "models/staging/stg_fivetran_log__destination_membership.sql", "name": "stg_fivetran_log__destination_membership", "resource_type": "model", "alias": "stg_fivetran_log__destination_membership", "checksum": {"name": "sha256", "checksum": "f3d22c9d1b183551e0e3b57d7ea74363f0e83b05855487315b26f742a458dcd2"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "destination_membership"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.destination_membership"]}, "description": "Table of the users given access to this destination.", "columns": {"destination_id": {"name": "destination_id", "description": "Foreign key referencing the ID of the `destination` that the user is  amember of.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the ID of the `user` belonging to the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "Timestamp of when the user was activated in the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "joined_at": {"name": "joined_at", "description": "Timestamp when the user was added to the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_role": {"name": "destination_role", "description": "The user's permissions for this individual destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__destination_membership.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with destination_membership as (\n    \n    select * from `dbt-package-testing`.`fivetran_log_acct`.`destination_membership`\n\n),\n\nfields as (\n\n    select\n        destination_id,\n        user_id,\n        activated_at,\n        joined_at,\n        role as destination_role\n        \n    from destination_membership\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination_membership`"}, "model.fivetran_log.stg_fivetran_log__transformation": {"raw_sql": "{{ config(enabled=var('fivetran_log_using_transformations', True)) }}\n\nwith transformation as (\n    \n    select * from {{ var('transformation') }}\n    \n),\n\nfields as (\n\n    select\n        id as transformation_id,\n        created_at,\n        created_by_id as created_by_user_id,\n        destination_id,\n        name as transformation_name,\n        paused as is_paused,\n        script,\n        trigger_delay,\n        trigger_interval,\n        trigger_type\n        \n    from transformation\n    \n)\n\nselect * from fields\nwhere transformation_id is not null", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__transformation"], "unique_id": "model.fivetran_log.stg_fivetran_log__transformation", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__transformation.sql", "original_file_path": "models/staging/stg_fivetran_log__transformation.sql", "name": "stg_fivetran_log__transformation", "resource_type": "model", "alias": "stg_fivetran_log__transformation", "checksum": {"name": "sha256", "checksum": "8807e5376769e9037b78c3475bd6788873fa21559f08123e113348647f3ecefb"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "transformation"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.transformation"]}, "description": "Table of [transformations](https://fivetran.com/docs/transformations) made and carried out in Fivetran. Note - this table is only created once you have created a transformation for the destination.\n", "columns": {"transformation_id": {"name": "transformation_id", "description": "Destination-unique ID of the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transformation was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Foreign key referencing the `user` who created the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referenencing the `destination` whose data is being transformed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transformation_name": {"name": "transformation_name", "description": "Name given to the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_paused": {"name": "is_paused", "description": "Boolean of whether the data transformation is currently paused.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "script": {"name": "script", "description": "The code content of the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_delay": {"name": "trigger_delay", "description": "The delay in triggering transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_interval": {"name": "trigger_interval", "description": "The scheduled frequency of the transformation, if a time schedule is chosen as its trigger.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_type": {"name": "trigger_type", "description": "The schedule type of the transformation (time schedule vs. new data in certain tables).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__transformation.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log", "enabled": true}, "compiled_sql": "\n\nwith transformation as (\n    \n    select * from `dbt-package-testing`.`fivetran_log_acct`.`transformation`\n    \n),\n\nfields as (\n\n    select\n        id as transformation_id,\n        created_at,\n        created_by_id as created_by_user_id,\n        destination_id,\n        name as transformation_name,\n        paused as is_paused,\n        script,\n        trigger_delay,\n        trigger_interval,\n        trigger_type\n        \n    from transformation\n    \n)\n\nselect * from fields\nwhere transformation_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__transformation`"}, "model.fivetran_log.stg_fivetran_log__account_membership": {"raw_sql": "with account_membership as (\n    \n    select * from {{ var('account_membership') }}\n\n),\n\nfields as (\n\n    select\n        account_id,\n        user_id,\n        activated_at,\n        joined_at,\n        role as account_role\n        \n    from account_membership\n    \n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__account_membership"], "unique_id": "model.fivetran_log.stg_fivetran_log__account_membership", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__account_membership.sql", "original_file_path": "models/staging/stg_fivetran_log__account_membership.sql", "name": "stg_fivetran_log__account_membership", "resource_type": "model", "alias": "stg_fivetran_log__account_membership", "checksum": {"name": "sha256", "checksum": "bff666c47ccffdbbabbfe06c9f2b255c07708156d258e8210715ed892c5759b6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "account_membership"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.account_membership"]}, "description": "Table of the users given access to this account.", "columns": {"account_id": {"name": "account_id", "description": "Foreign key referencing the ID of the `account` that the user belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the ID of the `user` belonging to the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "Timestamp of when the user was activated in the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "joined_at": {"name": "joined_at", "description": "Timestamp when the user joined the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_role": {"name": "account_role", "description": "The user's permissions for this account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__account_membership.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with account_membership as (\n    \n    select * from `dbt-package-testing`.`fivetran_log_acct`.`account_membership`\n\n),\n\nfields as (\n\n    select\n        account_id,\n        user_id,\n        activated_at,\n        joined_at,\n        role as account_role\n        \n    from account_membership\n    \n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__account_membership`"}, "model.fivetran_log.stg_fivetran_log__connector": {"raw_sql": "with connector as (\n\n    select * from {{ var('connector') }}\n\n),\n\nfields as (\n\n    select \n        connector_id,\n        connector_name,\n        connector_type,  -- use coalesce(connector_type, service) if the table has a service column (deprecated)\n        destination_id,\n        connecting_user_id,\n        paused as is_paused,\n        signed_up as set_up_at,\n\n        -- Consolidating duplicate connectors (ie deleted and then re-added)\n        row_number() over ( partition by connector_name, destination_id order by _fivetran_synced desc ) as nth_last_record\n\n    from connector\n\n),\n\nfinal as (\n\n    select \n        connector_id,\n        connector_name,\n        connector_type, \n        destination_id,\n        connecting_user_id,\n        is_paused,\n        set_up_at\n\n    from fields\n\n    -- Only look at the most recent one\n    where nth_last_record = 1\n)\n\nselect * from final", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__connector"], "unique_id": "model.fivetran_log.stg_fivetran_log__connector", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__connector.sql", "original_file_path": "models/staging/stg_fivetran_log__connector.sql", "name": "stg_fivetran_log__connector", "resource_type": "model", "alias": "stg_fivetran_log__connector", "checksum": {"name": "sha256", "checksum": "f3e64b06e94e85500051a94c9f30d942c8c67f9ee213c08bd20754a77b30dbd4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "connector"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.connector"]}, "description": "Table of all connectors loading data into warehouses. Note that deleted connectors  are not removed, but can be identified by having an older _fivetran_synced field relative  to other connectors.\n", "columns": {"connector_id": {"name": "connector_id", "description": "System generated destination-unique ID of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connecting_user_id": {"name": "connecting_user_id", "description": "Foreign key referencing the `user` who set up the connection.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_name": {"name": "connector_name", "description": "Individual name of the connector. Note that this could be different from the `active_volume.schema_name`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_type": {"name": "connector_type", "description": "The kind of connector (ie google sheets, webhooks).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the connector data is loaded into.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_paused": {"name": "is_paused", "description": "Boolean that is true if the connector's sync is currently paused.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "set_up_at": {"name": "set_up_at", "description": "Timestamp of when the connection was set up.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__connector.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with connector as (\n\n    select * from `dbt-package-testing`.`fivetran_log_acct`.`connector`\n\n),\n\nfields as (\n\n    select \n        connector_id,\n        connector_name,\n        connector_type,  -- use coalesce(connector_type, service) if the table has a service column (deprecated)\n        destination_id,\n        connecting_user_id,\n        paused as is_paused,\n        signed_up as set_up_at,\n\n        -- Consolidating duplicate connectors (ie deleted and then re-added)\n        row_number() over ( partition by connector_name, destination_id order by _fivetran_synced desc ) as nth_last_record\n\n    from connector\n\n),\n\nfinal as (\n\n    select \n        connector_id,\n        connector_name,\n        connector_type, \n        destination_id,\n        connecting_user_id,\n        is_paused,\n        set_up_at\n\n    from fields\n\n    -- Only look at the most recent one\n    where nth_last_record = 1\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__connector`"}, "model.fivetran_log.stg_fivetran_log__destination": {"raw_sql": "with destination as (\n\n    select * from {{ var('destination') }}\n\n),\n\nfields as (\n\n    select\n        id as destination_id,\n        account_id,\n        created_at,\n        name as destination_name,\n        region\n    \n    from destination\n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__destination"], "unique_id": "model.fivetran_log.stg_fivetran_log__destination", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__destination.sql", "original_file_path": "models/staging/stg_fivetran_log__destination.sql", "name": "stg_fivetran_log__destination", "resource_type": "model", "alias": "stg_fivetran_log__destination", "checksum": {"name": "sha256", "checksum": "081588eeee509bf686f79a47cf3cc37d6e6a88c82dcca8e9cd85c22abdc5acbc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "destination"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.destination"]}, "description": "Table of the destinations that have data loaded into them. For each declared source, there will be just one record.", "columns": {"destination_id": {"name": "destination_id", "description": "Unique ID of the destination warehouse", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key referencing the fivetran `account` associated with the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the destination was set up.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_name": {"name": "destination_name", "description": "Name of the destination warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Geographical region of the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__destination.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with destination as (\n\n    select * from `dbt-package-testing`.`fivetran_log_acct`.`destination`\n\n),\n\nfields as (\n\n    select\n        id as destination_id,\n        account_id,\n        created_at,\n        name as destination_name,\n        region\n    \n    from destination\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination`"}, "model.fivetran_log.stg_fivetran_log__active_volume": {"raw_sql": "with active_volume as (\n\n    select * from {{ var('active_volume') }}\n\n),\n\nfields as (\n\n    select\n        id as active_volume_id,\n        connector_id as connector_name, -- Note: this misnomer will be changed by Fivetran soon\n        destination_id,\n        measured_at,\n        monthly_active_rows,\n        schema_name,\n        table_name\n    \n    from active_volume\n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__active_volume"], "unique_id": "model.fivetran_log.stg_fivetran_log__active_volume", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__active_volume.sql", "original_file_path": "models/staging/stg_fivetran_log__active_volume.sql", "name": "stg_fivetran_log__active_volume", "resource_type": "model", "alias": "stg_fivetran_log__active_volume", "checksum": {"name": "sha256", "checksum": "a568c76fb51501058a8192b90afe1114bc8e0f84071b82a677106e2e10c2fc56"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "active_volume"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.active_volume"]}, "description": "Table of **monthly active row (MAR)** measurements made by table per date.  Each measurement is calculated cumulatively for the month. \n", "columns": {"active_volume_id": {"name": "active_volume_id", "description": "System-generated destination-unique ID of the active volume measurement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_name": {"name": "connector_name", "description": "The *name* of the connector being measured. Note - this is erroneously named and will be fixed soon by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` whose table is being measured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measured_at": {"name": "measured_at", "description": "Timestamp of when the MAR measurement was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_rows": {"name": "monthly_active_rows", "description": "The number of active rows cumulatively synced this month for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "The name of the connector's schema that houses the measured table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "The name of the table whose MAR was measured.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__active_volume.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with active_volume as (\n\n    select * from `dbt-package-testing`.`fivetran_log_acct`.`active_volume`\n\n),\n\nfields as (\n\n    select\n        id as active_volume_id,\n        connector_id as connector_name, -- Note: this misnomer will be changed by Fivetran soon\n        destination_id,\n        measured_at,\n        monthly_active_rows,\n        schema_name,\n        table_name\n    \n    from active_volume\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__active_volume`"}, "model.fivetran_log.stg_fivetran_log__user": {"raw_sql": "with fivetran_user as (\n\n    select * from {{ var('user') }}\n\n),\n\nfields as (\n\n    select\n        id as user_id,\n        created_at,\n        email,\n        email_disabled as has_disabled_email_notifications,\n        family_name as last_name,\n        given_name as first_name,\n        phone,\n        verified as is_verified\n        \n    from fivetran_user\n\n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__user"], "unique_id": "model.fivetran_log.stg_fivetran_log__user", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__user.sql", "original_file_path": "models/staging/stg_fivetran_log__user.sql", "name": "stg_fivetran_log__user", "resource_type": "model", "alias": "stg_fivetran_log__user", "checksum": {"name": "sha256", "checksum": "8f0467bae2bb45e548e7e7dbbaf4643f3d0764c5e1b310ecf0ba3bdb0fe59aa5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "user"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.user"]}, "description": "Table of users given access to this Fivetran account.", "columns": {"user_id": {"name": "user_id", "description": "Unique ID of the user's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the user was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email associated with the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_disabled_email_notifications": {"name": "has_disabled_email_notifications", "description": "Boolean of whether they have disabled all email notifications.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "User's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "User's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Phone number associated with user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_verified": {"name": "is_verified", "description": "Boolean that indicates whether the user has verified their email address in the account creation process.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__user.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with fivetran_user as (\n\n    select * from `dbt-package-testing`.`fivetran_log_acct`.`user`\n\n),\n\nfields as (\n\n    select\n        id as user_id,\n        created_at,\n        email,\n        email_disabled as has_disabled_email_notifications,\n        family_name as last_name,\n        given_name as first_name,\n        phone,\n        verified as is_verified\n        \n    from fivetran_user\n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__user`"}, "model.fivetran_log.stg_fivetran_log__log": {"raw_sql": "with log as (\n\n    select * from {{ var('log') }}\n    \n),\n\nfields as (\n\n    select\n        id as log_id, \n        time_stamp as created_at,\n        connector_id, -- Note: the connector_id column used to erroneously equal the connector_name, NOT its id.\n        case when transformation_id is not null and event is null then 'TRANSFORMATION'\n        else event end as event_type, \n        message_data,\n        case \n        when transformation_id is not null and message_data like '%has succeeded%' then 'transformation run success'\n        when transformation_id is not null and message_data like '%has failed%' then 'transformation run failed'\n        else message_event end as event_subtype,\n        transformation_id\n\n    from log\n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__log"], "unique_id": "model.fivetran_log.stg_fivetran_log__log", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__log.sql", "original_file_path": "models/staging/stg_fivetran_log__log.sql", "name": "stg_fivetran_log__log", "resource_type": "model", "alias": "stg_fivetran_log__log", "checksum": {"name": "sha256", "checksum": "6ac0525c3df43355028bc29ce5bd235c2756fe8bd9c52433d6ac09ce7bb534bf"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "log"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.log"]}, "description": "Table of logged events related to data syncs. More info on error logs  [here](https://fivetran.com/docs/logs/fivetran-log#errorlogs)\n", "columns": {"log_id": {"name": "log_id", "description": "Contains either `connector_name` (for app/api logs), `transformation_id` (for transformation logs),  or the value `\"system\"` (for system generated logs).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the event was logged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_id": {"name": "connector_id", "description": "The name of the `connector` that the logged event pertains to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The umbrella event type. Events can be classified as a warning, an error, or just an information log.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_data": {"name": "message_data", "description": "The details of the event in JSON format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_subtype": {"name": "event_subtype", "description": "The routine involved in the log, defined [here](https://fivetran.com/docs/logs#logevents).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transformation_id": {"name": "transformation_id", "description": "Foreign key referencing the `transformation` if the event refers to a transformation run.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__log.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with log as (\n\n    select * from `dbt-package-testing`.`fivetran_log_acct`.`log`\n    \n),\n\nfields as (\n\n    select\n        id as log_id, \n        time_stamp as created_at,\n        connector_id, -- Note: the connector_id column used to erroneously equal the connector_name, NOT its id.\n        case when transformation_id is not null and event is null then 'TRANSFORMATION'\n        else event end as event_type, \n        message_data,\n        case \n        when transformation_id is not null and message_data like '%has succeeded%' then 'transformation run success'\n        when transformation_id is not null and message_data like '%has failed%' then 'transformation run failed'\n        else message_event end as event_subtype,\n        transformation_id\n\n    from log\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`"}, "model.fivetran_log.stg_fivetran_log__account": {"raw_sql": "with account as (\n    \n    select * from {{ var('account') }}\n\n),\n\nfields as (\n\n    select\n        id as account_id,\n        country,\n        created_at,\n        name as account_name,\n        status\n        \n    from account\n\n)\n\nselect * from fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__account"], "unique_id": "model.fivetran_log.stg_fivetran_log__account", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__account.sql", "original_file_path": "models/staging/stg_fivetran_log__account.sql", "name": "stg_fivetran_log__account", "resource_type": "model", "alias": "stg_fivetran_log__account", "checksum": {"name": "sha256", "checksum": "c04c621340b20d5975fdf15767b2c462156f8503b89324c41d1c041da8f38359"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "account"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.account"]}, "description": "Table of information on this Fivetran account.", "columns": {"account_id": {"name": "account_id", "description": "Unique ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the Fivetran account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the Fivetran account (ie trial, frozen).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__account.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log"}, "compiled_sql": "with account as (\n    \n    select * from `dbt-package-testing`.`fivetran_log_acct`.`account`\n\n),\n\nfields as (\n\n    select\n        id as account_id,\n        country,\n        created_at,\n        name as account_name,\n        status\n        \n    from account\n\n)\n\nselect * from fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__account`"}, "model.fivetran_log.stg_fivetran_log__trigger_table": {"raw_sql": "{{ config(enabled=var('fivetran_log_using_triggers', True)) }}\n\nwith trigger_table as (\n\n    select * from {{ var('trigger_table') }}\n\n),\n\nfields as (\n\n    select \n        {% if target.type == 'bigquery' %} \n        table as trigger_table, \n        {% else %} \n        \"TABLE\" as trigger_table,\n        {% endif %}\n        \n        transformation_id\n    \n    from trigger_table\n    \n)\n\nselect * from fields\nwhere transformation_id is not null", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__stg_fivetran_log", "fqn": ["fivetran_log", "staging", "stg_fivetran_log__trigger_table"], "unique_id": "model.fivetran_log.stg_fivetran_log__trigger_table", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "staging/stg_fivetran_log__trigger_table.sql", "original_file_path": "models/staging/stg_fivetran_log__trigger_table.sql", "name": "stg_fivetran_log__trigger_table", "resource_type": "model", "alias": "stg_fivetran_log__trigger_table", "checksum": {"name": "sha256", "checksum": "0f4b064e3d33b86efa5e1f7617a5de93b55f323927e19b53954088ced8d4c3de"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_stg_fivetran_log", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["fivetran_log", "trigger_table"]], "depends_on": {"macros": [], "nodes": ["source.fivetran_log.fivetran_log.trigger_table"]}, "description": "Table relating transformations to the connector source tables that trigger them.  Transformations on time schedules do not appear here. Note - this table is only created  once you have created a triggered transformation.\n", "columns": {"trigger_table": {"name": "trigger_table", "description": "Connector source table whose new data triggers the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transformation_id": {"name": "transformation_id", "description": "Foreign key referencing the `transformation` that is triggered by new data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/stg_fivetran_log.yml", "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log__trigger_table.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_stg_fivetran_log", "enabled": true}, "compiled_sql": "\n\nwith trigger_table as (\n\n    select * from `dbt-package-testing`.`fivetran_log_acct`.`trigger_table`\n\n),\n\nfields as (\n\n    select \n         \n        table as trigger_table, \n        \n        \n        transformation_id\n    \n    from trigger_table\n    \n)\n\nselect * from fields\nwhere transformation_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__trigger_table`"}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["connector_id", "destination_id"], "model": "{{ ref('fivetran_log__connector_status') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id.sql", "original_file_path": "models/fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["fivetran_log__connector_status"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.fivetran_log__connector_status"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        connector_id, destination_id\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__connector_status`\n\n    group by connector_id, destination_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["connector_id", "destination_id", "table_name", "measured_month"], "model": "{{ ref('fivetran_log__mar_table_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_2d95f5d8b9028389f83ecb85cedda08a.sql", "original_file_path": "models/fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["fivetran_log__mar_table_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.fivetran_log__mar_table_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_2d95f5d8b9028389f83ecb85cedda08a.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        connector_id, destination_id, table_name, measured_month\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__mar_table_history`\n\n    group by connector_id, destination_id, table_name, measured_month\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["destination_id", "measured_month"], "model": "{{ ref('fivetran_log__credit_mar_destination_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month.sql", "original_file_path": "models/fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["fivetran_log__credit_mar_destination_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.fivetran_log__credit_mar_destination_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        destination_id, measured_month\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__credit_mar_destination_history`\n\n    group by destination_id, measured_month\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["destination_id", "transformation_id"], "model": "{{ ref('fivetran_log__transformation_status') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_d140adb16498c0633342de2b49632f7f.sql", "original_file_path": "models/fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["fivetran_log__transformation_status"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.fivetran_log__transformation_status"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_d140adb16498c0633342de2b49632f7f.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        destination_id, transformation_id\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__transformation_status`\n\n    group by destination_id, transformation_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["connector_id", "destination_id", "date_day"], "model": "{{ ref('fivetran_log__connector_daily_events') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_7468f5cf2ab128efca216b11bb20c800.sql", "original_file_path": "models/fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["fivetran_log__connector_daily_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.fivetran_log__connector_daily_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_7468f5cf2ab128efca216b11bb20c800.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        connector_id, destination_id, date_day\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__connector_daily_events`\n\n    group by connector_id, destination_id, date_day\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["connector_id", "destination_id", "table_name", "write_to_table_start"], "model": "{{ ref('fivetran_log__audit_table') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_f3d01855fa0f2147603c431413f75e58.sql", "original_file_path": "models/fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["fivetran_log__audit_table"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.fivetran_log__audit_table"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_f3d01855fa0f2147603c431413f75e58.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        connector_id, destination_id, table_name, write_to_table_start\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__audit_table`\n\n    group by connector_id, destination_id, table_name, write_to_table_start\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["connector_id", "destination_id", "created_at"], "model": "{{ ref('fivetran_log__schema_changelog') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_04d59a246e65ed9c15daffe2d25d3ebc.sql", "original_file_path": "models/fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["fivetran_log__schema_changelog"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.fivetran_log__schema_changelog"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_04d59a246e65ed9c15daffe2d25d3ebc.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        connector_id, destination_id, created_at\n    from `dbt-package-testing`.`dbt_jamie__fivetran_log`.`fivetran_log__schema_changelog`\n\n    group by connector_id, destination_id, created_at\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["active_volume_id", "destination_id"], "model": "{{ ref('stg_fivetran_log__active_volume') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__active_volume"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__active_volume"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        active_volume_id, destination_id\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__active_volume`\n\n    group by active_volume_id, destination_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["connector_name", "destination_id"], "model": "{{ ref('stg_fivetran_log__connector') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__connector"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__connector"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        connector_name, destination_id\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__connector`\n\n    group by connector_name, destination_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["measured_month", "destination_id"], "model": "{{ ref('stg_fivetran_log__credits_used') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__credits_used"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__credits_used"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        measured_month, destination_id\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__credits_used`\n\n    group by measured_month, destination_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.unique_stg_fivetran_log__destination_destination_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "destination_id", "model": "{{ ref('stg_fivetran_log__destination') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "unique_stg_fivetran_log__destination_destination_id"], "unique_id": "test.fivetran_log.unique_stg_fivetran_log__destination_destination_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/unique_stg_fivetran_log__destination_destination_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "unique_stg_fivetran_log__destination_destination_id", "resource_type": "test", "alias": "unique_stg_fivetran_log__destination_destination_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__destination"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.fivetran_log.stg_fivetran_log__destination"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/unique_stg_fivetran_log__destination_destination_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        destination_id\n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination`\n    where destination_id is not null\n    group by destination_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "destination_id"}, "test.fivetran_log.not_null_stg_fivetran_log__destination_destination_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "destination_id", "model": "{{ ref('stg_fivetran_log__destination') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "not_null_stg_fivetran_log__destination_destination_id"], "unique_id": "test.fivetran_log.not_null_stg_fivetran_log__destination_destination_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/not_null_stg_fivetran_log__destination_destination_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "not_null_stg_fivetran_log__destination_destination_id", "resource_type": "test", "alias": "not_null_stg_fivetran_log__destination_destination_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__destination"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.fivetran_log.stg_fivetran_log__destination"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/not_null_stg_fivetran_log__destination_destination_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination`\nwhere destination_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "destination_id"}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["log_id", "created_at"], "model": "{{ ref('stg_fivetran_log__log') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__log"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__log"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        log_id, created_at\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__log`\n\n    group by log_id, created_at\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.unique_stg_fivetran_log__account_account_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ ref('stg_fivetran_log__account') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "unique_stg_fivetran_log__account_account_id"], "unique_id": "test.fivetran_log.unique_stg_fivetran_log__account_account_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/unique_stg_fivetran_log__account_account_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "unique_stg_fivetran_log__account_account_id", "resource_type": "test", "alias": "unique_stg_fivetran_log__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.fivetran_log.stg_fivetran_log__account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/unique_stg_fivetran_log__account_account_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        account_id\n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__account`\n    where account_id is not null\n    group by account_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.fivetran_log.not_null_stg_fivetran_log__account_account_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ ref('stg_fivetran_log__account') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "not_null_stg_fivetran_log__account_account_id"], "unique_id": "test.fivetran_log.not_null_stg_fivetran_log__account_account_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/not_null_stg_fivetran_log__account_account_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "not_null_stg_fivetran_log__account_account_id", "resource_type": "test", "alias": "not_null_stg_fivetran_log__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.fivetran_log.stg_fivetran_log__account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/not_null_stg_fivetran_log__account_account_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__account`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "user_id"], "model": "{{ ref('stg_fivetran_log__account_membership') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__account_membership"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__account_membership"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, user_id\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__account_membership`\n\n    group by account_id, user_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["destination_id", "user_id"], "model": "{{ ref('stg_fivetran_log__destination_membership') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__destination_membership"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__destination_membership"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        destination_id, user_id\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__destination_membership`\n\n    group by destination_id, user_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transformation_id", "destination_id"], "model": "{{ ref('stg_fivetran_log__transformation') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_bd5b2df1ec35d6dcc63feec83753919b.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__transformation"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__transformation"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_bd5b2df1ec35d6dcc63feec83753919b.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transformation_id, destination_id\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__transformation`\n\n    group by transformation_id, destination_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["trigger_table", "transformation_id"], "model": "{{ ref('stg_fivetran_log__trigger_table') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id"], "unique_id": "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__trigger_table"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.fivetran_log.stg_fivetran_log__trigger_table"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        trigger_table, transformation_id\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__trigger_table`\n\n    group by trigger_table, transformation_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.fivetran_log.unique_stg_fivetran_log__user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_fivetran_log__user') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "unique_stg_fivetran_log__user_user_id"], "unique_id": "test.fivetran_log.unique_stg_fivetran_log__user_user_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/unique_stg_fivetran_log__user_user_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "unique_stg_fivetran_log__user_user_id", "resource_type": "test", "alias": "unique_stg_fivetran_log__user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.fivetran_log.stg_fivetran_log__user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/unique_stg_fivetran_log__user_user_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.fivetran_log.not_null_stg_fivetran_log__user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_fivetran_log__user') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_jamie__fivetran_log", "fqn": ["fivetran_log", "schema_test", "not_null_stg_fivetran_log__user_user_id"], "unique_id": "test.fivetran_log.not_null_stg_fivetran_log__user_user_id", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "schema_test/not_null_stg_fivetran_log__user_user_id.sql", "original_file_path": "models/staging/stg_fivetran_log.yml", "name": "not_null_stg_fivetran_log__user_user_id", "resource_type": "test", "alias": "not_null_stg_fivetran_log__user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "_fivetran_log", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_fivetran_log__user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.fivetran_log.stg_fivetran_log__user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/fivetran_log/models/staging/stg_fivetran_log.yml/schema_test/not_null_stg_fivetran_log__user_user_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "_fivetran_log", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie__stg_fivetran_log`.`stg_fivetran_log__user`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}}, "sources": {"source.fivetran_log.fivetran_log.active_volume": {"fqn": ["fivetran_log", "staging", "fivetran_log", "active_volume"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.active_volume", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "active_volume", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "active_volume", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of **monthly active row (MAR)** measurements made by table per date.  Each measurement is calculated cumulatively for the month. \n", "columns": {"id": {"name": "id", "description": "System-generated unique ID of the active volume measurement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_id": {"name": "connector_id", "description": "The *name* of the connector being measured. Note - this is erroneously named and will be fixed soon by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` whose table is being measured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measured_at": {"name": "measured_at", "description": "Timestamp of when the MAR measurement was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_rows": {"name": "monthly_active_rows", "description": "The number of active rows cumulatively synced this month for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "The name of the connector's schema that houses the measured table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "The name of the table whose MAR was measured.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`active_volume`"}, "source.fivetran_log.fivetran_log.connector": {"fqn": ["fivetran_log", "staging", "fivetran_log", "connector"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.connector", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "connector", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "connector", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of all connectors loading data into warehouses. Note that deleted connectors  are not removed, but can be identified by having an older _fivetran_synced field relative  to other connectors.\n", "columns": {"connector_id": {"name": "connector_id", "description": "System generated unique ID of the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connecting_user_id": {"name": "connecting_user_id", "description": "Foreign key referencing the `user` who set up the connector.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_name": {"name": "connector_name", "description": "Individual name of the connector. Note that this could be different from the `active_volume.schema_name`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_type": {"name": "connector_type", "description": "The kind of connector (ie google sheets, webhooks).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the connector data is loaded into.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paused": {"name": "paused", "description": "Boolean that is true if the connector's sync is currently paused.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signed_up": {"name": "signed_up", "description": "Timestamp of when the connection was set up.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`connector`"}, "source.fivetran_log.fivetran_log.credits_used": {"fqn": ["fivetran_log", "staging", "fivetran_log", "credits_used"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.credits_used", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "credits_used", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "credits_used", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of the credits used by the customer per month within each destination.", "columns": {"destination_id": {"name": "destination_id", "description": "Foreign key referencing the `destination` warehouse that the credits were used on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measured_month": {"name": "measured_month", "description": "The month (yyyy-mm) in which the credits were consumed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_consumed": {"name": "credits_consumed", "description": "The number of credits used by the destination for the given month.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`credits_used`"}, "source.fivetran_log.fivetran_log.destination": {"fqn": ["fivetran_log", "staging", "fivetran_log", "destination"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.destination", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "destination", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "destination", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of the destinations that have data loaded into them. For each declared source, there will be just one record.", "columns": {"id": {"name": "id", "description": "Unique ID of the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key referencing the fivetran `account` associated with the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the destination was set up.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the destination warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Geographical region of the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`destination`"}, "source.fivetran_log.fivetran_log.log": {"fqn": ["fivetran_log", "staging", "fivetran_log", "log"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.log", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "log", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "log", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of logged events related to data syncs. More info on error logs [here](https://fivetran.com/docs/logs/fivetran-log#errorlogs).", "columns": {"id": {"name": "id", "description": "Contains either `connector_name` (for app/api logs), `transformation_id` (for transformation logs),  or the value `\"system\"` (for system generated logs).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_stamp": {"name": "time_stamp", "description": "Timestamp of when the event was logged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "connector_id": {"name": "connector_id", "description": "The *name* of the connector being logged. Note - this is erroneously named and will be fixed soon by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event": {"name": "event", "description": "The umbrella event type. Events can be classified as a warning, an error, or just an information log.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_data": {"name": "message_data", "description": "The details of the event in JSON format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_event": {"name": "message_event", "description": "The routine involved in the log, defined [here](https://fivetran.com/docs/logs#logevents).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transformation_id": {"name": "transformation_id", "description": "Foreign key referencing the `transformation` if the event refers to a transformation run.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`log`"}, "source.fivetran_log.fivetran_log.account": {"fqn": ["fivetran_log", "staging", "fivetran_log", "account"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.account", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "account", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of information on this Fivetran account.", "columns": {"id": {"name": "id", "description": "Unique ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the Fivetran account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the Fivetran account (ie trial, frozen).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`account`"}, "source.fivetran_log.fivetran_log.account_membership": {"fqn": ["fivetran_log", "staging", "fivetran_log", "account_membership"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.account_membership", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "account_membership", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "account_membership", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of the users given access to this account.", "columns": {"account_id": {"name": "account_id", "description": "Foreign key referencing the ID of the `account` that the user belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the ID of the `user` belonging to the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "Timestamp of when the user was activated in the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "joined_at": {"name": "joined_at", "description": "Timestamp when the user joined the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The user's permissions for this account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`account_membership`"}, "source.fivetran_log.fivetran_log.destination_membership": {"fqn": ["fivetran_log", "staging", "fivetran_log", "destination_membership"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.destination_membership", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "destination_membership", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "destination_membership", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of the users given access to this destination.", "columns": {"destination_id": {"name": "destination_id", "description": "Foreign key referencing the ID of the `destination` that the user is a member of.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the ID of the `user` who has access to the destination", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "Timestamp of when the user was activated in the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "joined_at": {"name": "joined_at", "description": "Timestamp of when the user was added to the destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The user's permissions for this individual destination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`destination_membership`"}, "source.fivetran_log.fivetran_log.user": {"fqn": ["fivetran_log", "staging", "fivetran_log", "user"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.user", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "user", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of users given access to this Fivetran account.", "columns": {"id": {"name": "id", "description": "Unique ID of the user's account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the user was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email associated with the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_disabled": {"name": "email_disabled", "description": "Boolean of whether they have disabled all email notifications.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "family_name": {"name": "family_name", "description": "User's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "given_name": {"name": "given_name", "description": "User's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Phone number associated with user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "verified": {"name": "verified", "description": "Boolean that indicates whether the user has verified their email address in the account creation process.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`user`"}, "source.fivetran_log.fivetran_log.trigger_table": {"fqn": ["fivetran_log", "staging", "fivetran_log", "trigger_table"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.trigger_table", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "trigger_table", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "trigger_table", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table relating transformations to the connector source tables that trigger them.  Transformations on time schedules do not appear here. Note - this table is only created  once you have created a triggered transformation.\n", "columns": {"table": {"name": "table", "description": "Connector source table whose new data triggers the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transformation_id": {"name": "transformation_id", "description": "Foreign key referencing the `transformation` that is triggered by new data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`trigger_table`"}, "source.fivetran_log.fivetran_log.transformation": {"fqn": ["fivetran_log", "staging", "fivetran_log", "transformation"], "database": "dbt-package-testing", "schema": "fivetran_log_acct", "unique_id": "source.fivetran_log.fivetran_log.transformation", "package_name": "fivetran_log", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_log", "path": "models/staging/src_fivetran_log.yml", "original_file_path": "models/staging/src_fivetran_log.yml", "name": "transformation", "source_name": "fivetran_log", "source_description": "", "loader": "fivetran", "identifier": "transformation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of [transformations](https://fivetran.com/docs/transformations) made and carried out in Fivetran. Note - this table is only created once you have created a transformation for the destination.\n", "columns": {"id": {"name": "id", "description": "Unique ID of the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transformation was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Foreign key referencing the `user` who created the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_id": {"name": "destination_id", "description": "Foreign key referenencing the `destination` whose data is being transformed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name given to the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paused": {"name": "paused", "description": "Boolean of whether the transformation is currently paused.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "script": {"name": "script", "description": "The code content of the transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_delay": {"name": "trigger_delay", "description": "The delay in triggering transformation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_interval": {"name": "trigger_interval", "description": "The scheduled frequency of the transformation, if a time schedule is chosen as its trigger.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_type": {"name": "trigger_type", "description": "The schedule type of the transformation (time schedule vs. new data in certain tables).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`fivetran_log_acct`.`transformation`"}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {# there should be exactly one ref or exactly one source #}\n  {% set destination = this.incorporate(type='table') %}\n\n  {% set dependency_type = none %}\n  {% if (model.refs | length) == 1 and (model.sources | length) == 0 %}\n    {% set dependency_type = 'ref' %}\n  {% elif (model.refs | length) == 0 and (model.sources | length) == 1 %}\n    {% set dependency_type = 'source' %}\n  {% else %}\n    {% set msg %}\n        Expected exactly one ref or exactly one source, instead got {{ model.refs | length }} models and {{ model.sources | length }} sources.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% if dependency_type == 'ref' %}\n    {% set src =  ref(*model.refs[0]) %}\n  {% else %}\n    {% set src =  source(*model.sources[0]) %}\n  {% endif %}\n\n  {%- set result_str = adapter.copy_table(\n      src,\n      destination,\n      config.get('copy_materialization', 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n  {%- set partition_type =\n      'date' if partition_by.data_type in ('timestamp, datetime')\n      else partition_by.data_type -%}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }};\n\n      set _dbt_max_partition = (\n          select max({{ partition_by.field }}) from {{ this }}\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n\n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n\n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', packages = dbt_utils._get_utils_namespaces()) (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', packages = dbt_utils._get_utils_namespaces())(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', packages = dbt_utils._get_utils_namespaces()) (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', packages = dbt_utils._get_utils_namespaces())(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', packages = dbt_utils._get_utils_namespaces()) (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', packages = dbt_utils._get_utils_namespaces())(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', packages = dbt_utils._get_utils_namespaces()) (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', packages = dbt_utils._get_utils_namespaces()) (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', packages = dbt_utils._get_utils_namespaces()) (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', packages = dbt_utils._get_utils_namespaces()) (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._get_utils_namespaces": {"unique_id": "macro.dbt_utils._get_utils_namespaces", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_get_utils_namespaces.sql", "original_file_path": "macros/cross_db_utils/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', packages = dbt_utils._get_utils_namespaces()) (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    {{ exceptions.raise_compiler_error(\n        \"dbt_utils.last_day is not supported for datepart 'quarter' on this adapter\") }}\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', packages = dbt_utils._get_utils_namespaces()) (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', packages = dbt_utils._get_utils_namespaces()) (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', packages = dbt_utils._get_utils_namespaces())(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', packages = dbt_utils._get_utils_namespaces())(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', packages = dbt_utils._get_utils_namespaces())(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', packages = dbt_utils._get_utils_namespaces())(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', packages = dbt_utils._get_utils_namespaces())(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', packages = dbt_utils._get_utils_namespaces())(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1,lon1,lat2,lon2) -%}\n    {{ return(adapter.dispatch('haversine_distance', packages = dbt_utils._get_utils_namespaces())(lat1,lon1,lat2,lon2)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1,lon1,lat2,lon2) -%}\n\n    2 * 3961 * asin(sqrt((sin(radians(({{lat2}} - {{lat1}}) / 2))) ^ 2 +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    (sin(radians(({{lon2}} - {{lon1}}) / 2))) ^ 2))\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n  {{ return(adapter.dispatch('test_relationships_where', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', packages = dbt_utils._get_utils_namespaces())(model, datepart, interval, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n  {{ return(adapter.dispatch('test_not_constant', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          {# In TSQL, subquery aggregate columns need aliases #}\n          {# thus: a filler col name, 'filler_column' #}\n          count(distinct {{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% macro test_unique_where(model) %}\r\n  {{ return(adapter.dispatch('test_unique_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom (\r\n\r\n    select\r\n        {{ column_name }}\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n      {% if where %} and {{ where }} {% endif %}\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n  {{ return(adapter.dispatch('test_at_least_one', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model, quote_columns = false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', packages = dbt_utils._get_utils_namespaces())(model, quote_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, quote_columns = false) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{% if not quote_columns %}\n    {%- set column_list=columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n    {{ return(adapter.dispatch('test_cardinality_equality', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, to, field) %}\n\n{# T-SQL doesn't let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ column_name }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', packages = dbt_utils._get_utils_namespaces())(model, condition, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    where not({{expression}})\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% macro test_not_null_where(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n{% if where %} and {{ where }} {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n  {{ return(adapter.dispatch('test_equality', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- set compare_columns = kwargs.get('compare_columns', None) -%}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', packages = dbt_utils._get_utils_namespaces())(model, lower_bound_column, upper_bound_column, partition_by, gaps)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound < upper_bound,\n            false\n        ) as lower_bound_less_than_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_less_than_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', packages = dbt_utils._get_utils_namespaces())(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', packages = dbt_utils._get_utils_namespaces())(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', packages = dbt_utils._get_utils_namespaces())(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', packages = dbt_utils._get_utils_namespaces())(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast({{ col.column }} as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', packages = dbt_utils._get_utils_namespaces())(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', packages = dbt_utils._get_utils_namespaces())(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', packages = dbt_utils._get_utils_namespaces())(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', packages = dbt_utils._get_utils_namespaces())(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', packages = dbt_utils._get_utils_namespaces())(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', packages = dbt_utils._get_utils_namespaces())\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', packages = dbt_utils._get_utils_namespaces())(table, column, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', packages = dbt_utils._get_utils_namespaces())(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', packages = dbt_utils._get_utils_namespaces())(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', packages = fivetran_utils._get_utils_namespaces()) (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', packages = fivetran_utils._get_utils_namespaces()) (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('datediff', packages = fivetran_utils._get_utils_namespaces())(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__datediff": {"unique_id": "macro.fivetran_utils.postgres__datediff", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.generate_columns_macro": {"unique_id": "macro.fivetran_utils.generate_columns_macro", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/generate_columns_macro.sql", "original_file_path": "macros/generate_columns_macro.sql", "name": "generate_columns_macro", "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', packages = fivetran_utils._get_utils_namespaces()) (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.snowflake__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "snowflake__get_columns_for_macro", "macro_sql": "{% macro snowflake__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) = 'number' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "bigquery__get_columns_for_macro", "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) = 'numeric' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_int()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.get_columns_for_macro": {"unique_id": "macro.fivetran_utils.get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "get_columns_for_macro", "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type == 'bigquery' %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', packages = fivetran_utils._get_utils_namespaces()) (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', packages = fivetran_utils._get_utils_namespaces()) (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', packages = fivetran_utils._get_utils_namespaces()) (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils._get_utils_namespaces": {"unique_id": "macro.fivetran_utils._get_utils_namespaces", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/_get_utils_namespaces.sql", "original_file_path": "macros/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils', 'fivetran_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__array_agg": {"unique_id": "macro.fivetran_utils.snowflake__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "snowflake__array_agg", "macro_sql": "{% macro snowflake__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__array_agg": {"unique_id": "macro.fivetran_utils.bigquery__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "bigquery__array_agg", "macro_sql": "{% macro bigquery__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/jamie_dbt_dev/dbt_modules/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.fivetran_log.fivetran_log__transformation_status": ["model.fivetran_log.stg_fivetran_log__destination", "model.fivetran_log.stg_fivetran_log__log", "model.fivetran_log.stg_fivetran_log__transformation", "model.fivetran_log.stg_fivetran_log__trigger_table"], "model.fivetran_log.fivetran_log__connector_status": ["model.fivetran_log.stg_fivetran_log__connector", "model.fivetran_log.stg_fivetran_log__destination", "model.fivetran_log.stg_fivetran_log__log", "model.fivetran_log.stg_fivetran_log__log"], "model.fivetran_log.fivetran_log__credit_mar_destination_history": ["model.fivetran_log.fivetran_log__mar_table_history", "model.fivetran_log.stg_fivetran_log__credits_used"], "model.fivetran_log.fivetran_log__audit_table": ["model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.stg_fivetran_log__log"], "model.fivetran_log.fivetran_log__mar_table_history": ["model.fivetran_log.stg_fivetran_log__active_volume", "model.fivetran_log.stg_fivetran_log__connector", "model.fivetran_log.stg_fivetran_log__destination"], "model.fivetran_log.fivetran_log__schema_changelog": ["model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.stg_fivetran_log__log"], "model.fivetran_log.fivetran_log__connector_daily_events": ["model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.stg_fivetran_log__log", "source.fivetran_log.fivetran_log.connector"], "model.fivetran_log.stg_fivetran_log__credits_used": ["source.fivetran_log.fivetran_log.credits_used"], "model.fivetran_log.stg_fivetran_log__destination_membership": ["source.fivetran_log.fivetran_log.destination_membership"], "model.fivetran_log.stg_fivetran_log__transformation": ["source.fivetran_log.fivetran_log.transformation"], "model.fivetran_log.stg_fivetran_log__account_membership": ["source.fivetran_log.fivetran_log.account_membership"], "model.fivetran_log.stg_fivetran_log__connector": ["source.fivetran_log.fivetran_log.connector"], "model.fivetran_log.stg_fivetran_log__destination": ["source.fivetran_log.fivetran_log.destination"], "model.fivetran_log.stg_fivetran_log__active_volume": ["source.fivetran_log.fivetran_log.active_volume"], "model.fivetran_log.stg_fivetran_log__user": ["source.fivetran_log.fivetran_log.user"], "model.fivetran_log.stg_fivetran_log__log": ["source.fivetran_log.fivetran_log.log"], "model.fivetran_log.stg_fivetran_log__account": ["source.fivetran_log.fivetran_log.account"], "model.fivetran_log.stg_fivetran_log__trigger_table": ["source.fivetran_log.fivetran_log.trigger_table"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id": ["model.fivetran_log.fivetran_log__connector_status"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month": ["model.fivetran_log.fivetran_log__mar_table_history"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month": ["model.fivetran_log.fivetran_log__credit_mar_destination_history"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id": ["model.fivetran_log.fivetran_log__transformation_status"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day": ["model.fivetran_log.fivetran_log__connector_daily_events"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start": ["model.fivetran_log.fivetran_log__audit_table"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at": ["model.fivetran_log.fivetran_log__schema_changelog"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id": ["model.fivetran_log.stg_fivetran_log__active_volume"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id": ["model.fivetran_log.stg_fivetran_log__connector"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id": ["model.fivetran_log.stg_fivetran_log__credits_used"], "test.fivetran_log.unique_stg_fivetran_log__destination_destination_id": ["model.fivetran_log.stg_fivetran_log__destination"], "test.fivetran_log.not_null_stg_fivetran_log__destination_destination_id": ["model.fivetran_log.stg_fivetran_log__destination"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at": ["model.fivetran_log.stg_fivetran_log__log"], "test.fivetran_log.unique_stg_fivetran_log__account_account_id": ["model.fivetran_log.stg_fivetran_log__account"], "test.fivetran_log.not_null_stg_fivetran_log__account_account_id": ["model.fivetran_log.stg_fivetran_log__account"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id": ["model.fivetran_log.stg_fivetran_log__account_membership"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id": ["model.fivetran_log.stg_fivetran_log__destination_membership"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id": ["model.fivetran_log.stg_fivetran_log__transformation"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id": ["model.fivetran_log.stg_fivetran_log__trigger_table"], "test.fivetran_log.unique_stg_fivetran_log__user_user_id": ["model.fivetran_log.stg_fivetran_log__user"], "test.fivetran_log.not_null_stg_fivetran_log__user_user_id": ["model.fivetran_log.stg_fivetran_log__user"], "source.fivetran_log.fivetran_log.active_volume": [], "source.fivetran_log.fivetran_log.connector": [], "source.fivetran_log.fivetran_log.credits_used": [], "source.fivetran_log.fivetran_log.destination": [], "source.fivetran_log.fivetran_log.log": [], "source.fivetran_log.fivetran_log.account": [], "source.fivetran_log.fivetran_log.account_membership": [], "source.fivetran_log.fivetran_log.destination_membership": [], "source.fivetran_log.fivetran_log.user": [], "source.fivetran_log.fivetran_log.trigger_table": [], "source.fivetran_log.fivetran_log.transformation": []}, "child_map": {"model.fivetran_log.fivetran_log__transformation_status": ["test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id"], "model.fivetran_log.fivetran_log__connector_status": ["model.fivetran_log.fivetran_log__audit_table", "model.fivetran_log.fivetran_log__connector_daily_events", "model.fivetran_log.fivetran_log__schema_changelog", "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id"], "model.fivetran_log.fivetran_log__credit_mar_destination_history": ["test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month"], "model.fivetran_log.fivetran_log__audit_table": ["test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start"], "model.fivetran_log.fivetran_log__mar_table_history": ["model.fivetran_log.fivetran_log__credit_mar_destination_history", "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month"], "model.fivetran_log.fivetran_log__schema_changelog": ["test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at"], "model.fivetran_log.fivetran_log__connector_daily_events": ["test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day"], "model.fivetran_log.stg_fivetran_log__credits_used": ["model.fivetran_log.fivetran_log__credit_mar_destination_history", "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id"], "model.fivetran_log.stg_fivetran_log__destination_membership": ["test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id"], "model.fivetran_log.stg_fivetran_log__transformation": ["model.fivetran_log.fivetran_log__transformation_status", "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id"], "model.fivetran_log.stg_fivetran_log__account_membership": ["test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id"], "model.fivetran_log.stg_fivetran_log__connector": ["model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.fivetran_log__mar_table_history", "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id"], "model.fivetran_log.stg_fivetran_log__destination": ["model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.fivetran_log__mar_table_history", "model.fivetran_log.fivetran_log__transformation_status", "test.fivetran_log.not_null_stg_fivetran_log__destination_destination_id", "test.fivetran_log.unique_stg_fivetran_log__destination_destination_id"], "model.fivetran_log.stg_fivetran_log__active_volume": ["model.fivetran_log.fivetran_log__mar_table_history", "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id"], "model.fivetran_log.stg_fivetran_log__user": ["test.fivetran_log.not_null_stg_fivetran_log__user_user_id", "test.fivetran_log.unique_stg_fivetran_log__user_user_id"], "model.fivetran_log.stg_fivetran_log__log": ["model.fivetran_log.fivetran_log__audit_table", "model.fivetran_log.fivetran_log__connector_daily_events", "model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.fivetran_log__connector_status", "model.fivetran_log.fivetran_log__schema_changelog", "model.fivetran_log.fivetran_log__transformation_status", "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at"], "model.fivetran_log.stg_fivetran_log__account": ["test.fivetran_log.not_null_stg_fivetran_log__account_account_id", "test.fivetran_log.unique_stg_fivetran_log__account_account_id"], "model.fivetran_log.stg_fivetran_log__trigger_table": ["model.fivetran_log.fivetran_log__transformation_status", "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id"], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_status_connector_id__destination_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__mar_table_history_connector_id__destination_id__table_name__measured_month": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__credit_mar_destination_history_destination_id__measured_month": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__transformation_status_destination_id__transformation_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__connector_daily_events_connector_id__destination_id__date_day": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__audit_table_connector_id__destination_id__table_name__write_to_table_start": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_fivetran_log__schema_changelog_connector_id__destination_id__created_at": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__active_volume_active_volume_id__destination_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__connector_connector_name__destination_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__credits_used_measured_month__destination_id": [], "test.fivetran_log.unique_stg_fivetran_log__destination_destination_id": [], "test.fivetran_log.not_null_stg_fivetran_log__destination_destination_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__log_log_id__created_at": [], "test.fivetran_log.unique_stg_fivetran_log__account_account_id": [], "test.fivetran_log.not_null_stg_fivetran_log__account_account_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__account_membership_account_id__user_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__destination_membership_destination_id__user_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__transformation_transformation_id__destination_id": [], "test.fivetran_log.dbt_utils_unique_combination_of_columns_stg_fivetran_log__trigger_table_trigger_table__transformation_id": [], "test.fivetran_log.unique_stg_fivetran_log__user_user_id": [], "test.fivetran_log.not_null_stg_fivetran_log__user_user_id": [], "source.fivetran_log.fivetran_log.active_volume": ["model.fivetran_log.stg_fivetran_log__active_volume"], "source.fivetran_log.fivetran_log.connector": ["model.fivetran_log.fivetran_log__connector_daily_events", "model.fivetran_log.stg_fivetran_log__connector"], "source.fivetran_log.fivetran_log.credits_used": ["model.fivetran_log.stg_fivetran_log__credits_used"], "source.fivetran_log.fivetran_log.destination": ["model.fivetran_log.stg_fivetran_log__destination"], "source.fivetran_log.fivetran_log.log": ["model.fivetran_log.stg_fivetran_log__log"], "source.fivetran_log.fivetran_log.account": ["model.fivetran_log.stg_fivetran_log__account"], "source.fivetran_log.fivetran_log.account_membership": ["model.fivetran_log.stg_fivetran_log__account_membership"], "source.fivetran_log.fivetran_log.destination_membership": ["model.fivetran_log.stg_fivetran_log__destination_membership"], "source.fivetran_log.fivetran_log.user": ["model.fivetran_log.stg_fivetran_log__user"], "source.fivetran_log.fivetran_log.trigger_table": ["model.fivetran_log.stg_fivetran_log__trigger_table"], "source.fivetran_log.fivetran_log.transformation": ["model.fivetran_log.stg_fivetran_log__transformation"]}}